{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"withModal\", \"disableNativeModal\"];\nimport * as React from 'react';\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { AnimatedModal } from \"./AnimatedModal\";\nimport { Modal } from \"./Modal\";\nimport { useTheme } from \"./CountryTheme\";\nimport { CountryModalContext } from \"./CountryModalProvider\";\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});\nexport var CountryModal = function CountryModal(_ref) {\n  var children = _ref.children,\n    withModal = _ref.withModal,\n    disableNativeModal = _ref.disableNativeModal,\n    props = _objectWithoutProperties(_ref, _excluded);\n  var _useTheme = useTheme(),\n    backgroundColor = _useTheme.backgroundColor;\n  var _React$useContext = React.useContext(CountryModalContext),\n    teleport = _React$useContext.teleport;\n  var content = React.createElement(SafeAreaView, {\n    style: [styles.container, {\n      backgroundColor: backgroundColor\n    }]\n  }, children);\n  React.useEffect(function () {\n    if (disableNativeModal) {\n      teleport(React.createElement(AnimatedModal, Object.assign({}, props), content));\n    }\n  }, [disableNativeModal]);\n  if (withModal) {\n    if (Platform.OS === 'web') {\n      return React.createElement(Modal, Object.assign({}, props), content);\n    }\n    if (disableNativeModal) {\n      return null;\n    }\n    return React.createElement(Modal, Object.assign({}, props), content);\n  }\n  return content;\n};\nCountryModal.defaultProps = {\n  animationType: 'slide',\n  animated: true,\n  withModal: true,\n  disableNativeModal: false\n};","map":{"version":3,"sources":["../src/CountryModal.tsx"],"names":[],"mappings":";;AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAAA,OAAA,YAAA;AAAA,OAAA,UAAA;AAAA,OAAA,QAAA;AAE9B,SAAS,aAAa;AACtB,SAAS,KAAK;AACd,SAAS,QAAQ;AACjB,SAAS,mBAAmB;AAE5B,IAAM,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC;EAC/B,SAAS,EAAE;IACT,IAAI,EAAE;EACP;CACF,CAAC;AAEF,OAAO,IAAM,YAAY,GAAG,SAAf,YAAY,CAAA,IAAA,EASpB;EAAA,IARH,QAAQ,GAAA,IAAA,CAAR,QAAQ;IACR,SAAS,GAAA,IAAA,CAAT,SAAS;IACT,kBAAkB,GAAA,IAAA,CAAlB,kBAAkB;IACf,KAAK,GAAA,wBAAA,CAAA,IAAA,EAAA,SAAA;EAMR,IAAA,SAAA,GAA4B,QAAQ,EAAE;IAA9B,eAAe,GAAA,SAAA,CAAf,eAAe;EACvB,IAAA,iBAAA,GAAqB,KAAK,CAAC,UAAU,CAAC,mBAAmB,CAAC;IAAlD,QAAQ,GAAA,iBAAA,CAAR,QAAQ;EAChB,IAAM,OAAO,GACX,KAAA,CAAA,aAAA,CAAC,YAAY,EAAA;IAAC,KAAK,EAAE,CAAC,MAAM,CAAC,SAAS,EAAE;MAAE,eAAe,EAAf;IAAe,CAAE;EAAC,CAAA,EACzD,QAAQ,CAEZ;EACD,KAAK,CAAC,SAAS,CAAC,YAAK;IACnB,IAAI,kBAAkB,EAAE;MACtB,QAAS,CAAC,KAAA,CAAA,aAAA,CAAC,aAAa,EAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EAAK,KAAK,CAAA,EAAG,OAAO,CAAiB,CAAC;IAC/D;EACH,CAAC,EAAE,CAAC,kBAAkB,CAAC,CAAC;EACxB,IAAI,SAAS,EAAE;IACb,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,EAAE;MACzB,OAAO,KAAA,CAAA,aAAA,CAAC,KAAK,EAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EAAK,KAAK,CAAA,EAAG,OAAO,CAAS;IAC3C;IACD,IAAI,kBAAkB,EAAE;MACtB,OAAO,IAAI;IACZ;IACD,OAAO,KAAA,CAAA,aAAA,CAAC,KAAK,EAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EAAK,KAAK,CAAA,EAAG,OAAO,CAAS;EAC3C;EACD,OAAO,OAAO;AAChB,CAAC;AAED,YAAY,CAAC,YAAY,GAAG;EAC1B,aAAa,EAAE,OAAO;EACtB,QAAQ,EAAE,IAAI;EACd,SAAS,EAAE,IAAI;EACf,kBAAkB,EAAE;CACrB","sourceRoot":"","sourcesContent":["import * as React from 'react';\nimport { SafeAreaView, StyleSheet, Platform } from 'react-native';\nimport { AnimatedModal } from './AnimatedModal';\nimport { Modal } from './Modal';\nimport { useTheme } from './CountryTheme';\nimport { CountryModalContext } from './CountryModalProvider';\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n    },\n});\nexport const CountryModal = ({ children, withModal, disableNativeModal, ...props }) => {\n    const { backgroundColor } = useTheme();\n    const { teleport } = React.useContext(CountryModalContext);\n    const content = (React.createElement(SafeAreaView, { style: [styles.container, { backgroundColor }] }, children));\n    React.useEffect(() => {\n        if (disableNativeModal) {\n            teleport(React.createElement(AnimatedModal, Object.assign({}, props), content));\n        }\n    }, [disableNativeModal]);\n    if (withModal) {\n        if (Platform.OS === 'web') {\n            return React.createElement(Modal, Object.assign({}, props), content);\n        }\n        if (disableNativeModal) {\n            return null;\n        }\n        return React.createElement(Modal, Object.assign({}, props), content);\n    }\n    return content;\n};\nCountryModal.defaultProps = {\n    animationType: 'slide',\n    animated: true,\n    withModal: true,\n    disableNativeModal: false,\n};\n//# sourceMappingURL=CountryModal.js.map"]},"metadata":{},"sourceType":"module"}
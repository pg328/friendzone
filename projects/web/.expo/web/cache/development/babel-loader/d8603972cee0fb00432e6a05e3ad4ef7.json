{"ast":null,"code":"import React, { memo } from 'react';\nimport { Emoji } from \"./Emoji\";\nimport { useContext } from \"./CountryContext\";\nimport { useAsync } from 'react-async-hook';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport PixelRatio from \"react-native-web/dist/exports/PixelRatio\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nvar styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: 30,\n    marginRight: 10\n  },\n  emojiFlag: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderWidth: 1 / PixelRatio.get(),\n    borderColor: 'transparent',\n    backgroundColor: 'transparent'\n  },\n  imageFlag: {\n    resizeMode: 'contain',\n    width: 25,\n    height: 19,\n    borderWidth: 1 / PixelRatio.get(),\n    opacity: 0.8\n  }\n});\nvar ImageFlag = memo(function (_ref) {\n  var countryCode = _ref.countryCode,\n    flagSize = _ref.flagSize;\n  var _useContext = useContext(),\n    getImageFlagAsync = _useContext.getImageFlagAsync;\n  var asyncResult = useAsync(getImageFlagAsync, [countryCode]);\n  if (asyncResult.loading) {\n    return React.createElement(ActivityIndicator, {\n      size: 'small'\n    });\n  }\n  return React.createElement(Image, {\n    resizeMode: 'contain',\n    style: [styles.imageFlag, {\n      borderColor: 'transparent',\n      height: flagSize\n    }],\n    source: {\n      uri: asyncResult.result\n    }\n  });\n});\nvar EmojiFlag = memo(function (_ref2) {\n  var countryCode = _ref2.countryCode,\n    flagSize = _ref2.flagSize;\n  var _useContext2 = useContext(),\n    getEmojiFlagAsync = _useContext2.getEmojiFlagAsync;\n  var asyncResult = useAsync(getEmojiFlagAsync, [countryCode]);\n  if (asyncResult.loading) {\n    return React.createElement(ActivityIndicator, {\n      size: 'small'\n    });\n  }\n  return React.createElement(Text, {\n    style: [styles.emojiFlag, {\n      fontSize: flagSize\n    }],\n    allowFontScaling: false\n  }, React.createElement(Emoji, Object.assign({}, {\n    name: asyncResult.result\n  })));\n});\nexport var Flag = function Flag(_ref3) {\n  var countryCode = _ref3.countryCode,\n    withEmoji = _ref3.withEmoji,\n    withFlagButton = _ref3.withFlagButton,\n    flagSize = _ref3.flagSize;\n  return withFlagButton ? React.createElement(View, {\n    style: styles.container\n  }, withEmoji ? React.createElement(EmojiFlag, Object.assign({}, {\n    countryCode: countryCode,\n    flagSize: flagSize\n  })) : React.createElement(ImageFlag, Object.assign({}, {\n    countryCode: countryCode,\n    flagSize: flagSize\n  }))) : null;\n};\nFlag.defaultProps = {\n  withEmoji: true,\n  withFlagButton: true\n};","map":{"version":3,"sources":["../src/Flag.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import React, { memo } from 'react';\nimport { Emoji } from './Emoji';\nimport { useContext } from './CountryContext';\nimport { useAsync } from 'react-async-hook';\nimport { Image, StyleSheet, PixelRatio, Text, View, ActivityIndicator, } from 'react-native';\nconst styles = StyleSheet.create({\n    container: {\n        justifyContent: 'center',\n        alignItems: 'center',\n        width: 30,\n        marginRight: 10,\n    },\n    emojiFlag: {\n        alignItems: 'center',\n        justifyContent: 'center',\n        borderWidth: 1 / PixelRatio.get(),\n        borderColor: 'transparent',\n        backgroundColor: 'transparent',\n    },\n    imageFlag: {\n        resizeMode: 'contain',\n        width: 25,\n        height: 19,\n        borderWidth: 1 / PixelRatio.get(),\n        opacity: 0.8,\n    },\n});\nconst ImageFlag = memo(({ countryCode, flagSize }) => {\n    const { getImageFlagAsync } = useContext();\n    const asyncResult = useAsync(getImageFlagAsync, [countryCode]);\n    if (asyncResult.loading) {\n        return React.createElement(ActivityIndicator, { size: 'small' });\n    }\n    return (React.createElement(Image, { resizeMode: 'contain', style: [\n            styles.imageFlag,\n            { borderColor: 'transparent', height: flagSize },\n        ], source: { uri: asyncResult.result } }));\n});\nconst EmojiFlag = memo(({ countryCode, flagSize }) => {\n    const { getEmojiFlagAsync } = useContext();\n    const asyncResult = useAsync(getEmojiFlagAsync, [countryCode]);\n    if (asyncResult.loading) {\n        return React.createElement(ActivityIndicator, { size: 'small' });\n    }\n    return (React.createElement(Text, { style: [styles.emojiFlag, { fontSize: flagSize }], allowFontScaling: false },\n        React.createElement(Emoji, Object.assign({}, { name: asyncResult.result }))));\n});\nexport const Flag = ({ countryCode, withEmoji, withFlagButton, flagSize, }) => withFlagButton ? (React.createElement(View, { style: styles.container }, withEmoji ? (React.createElement(EmojiFlag, Object.assign({}, { countryCode, flagSize }))) : (React.createElement(ImageFlag, Object.assign({}, { countryCode, flagSize }))))) : null;\nFlag.defaultProps = {\n    withEmoji: true,\n    withFlagButton: true,\n};\n//# sourceMappingURL=Flag.js.map"]},"metadata":{},"sourceType":"module"}
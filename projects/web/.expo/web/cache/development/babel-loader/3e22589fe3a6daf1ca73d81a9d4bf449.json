{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport React, { useState, useEffect } from 'react';\nimport { CountryModal } from \"./CountryModal\";\nimport { HeaderModal } from \"./HeaderModal\";\nimport { FlagType } from \"./types\";\nimport { CountryFilter } from \"./CountryFilter\";\nimport { FlagButton } from \"./FlagButton\";\nimport { useContext } from \"./CountryContext\";\nimport { CountryList } from \"./CountryList\";\nvar renderFlagButton = function renderFlagButton(props) {\n  return props.renderFlagButton ? props.renderFlagButton(props) : React.createElement(FlagButton, Object.assign({}, props));\n};\nvar _renderFilter = function renderFilter(props) {\n  return props.renderCountryFilter ? props.renderCountryFilter(props) : React.createElement(CountryFilter, Object.assign({}, props));\n};\nexport var CountryPicker = function CountryPicker(props) {\n  var countryCode = props.countryCode,\n    region = props.region,\n    subregion = props.subregion,\n    countryCodes = props.countryCodes,\n    renderButton = props.renderFlagButton,\n    renderCountryFilter = props.renderCountryFilter,\n    filterProps = props.filterProps,\n    modalProps = props.modalProps,\n    flatListProps = props.flatListProps,\n    onSelect = props.onSelect,\n    withEmoji = props.withEmoji,\n    withFilter = props.withFilter,\n    withCloseButton = props.withCloseButton,\n    withCountryNameButton = props.withCountryNameButton,\n    withCallingCodeButton = props.withCallingCodeButton,\n    withCurrencyButton = props.withCurrencyButton,\n    containerButtonStyle = props.containerButtonStyle,\n    withAlphaFilter = props.withAlphaFilter,\n    withCallingCode = props.withCallingCode,\n    withCurrency = props.withCurrency,\n    withFlag = props.withFlag,\n    withModal = props.withModal,\n    disableNativeModal = props.disableNativeModal,\n    withFlagButton = props.withFlagButton,\n    handleClose = props.onClose,\n    handleOpen = props.onOpen,\n    closeButtonImage = props.closeButtonImage,\n    closeButtonStyle = props.closeButtonStyle,\n    closeButtonImageStyle = props.closeButtonImageStyle,\n    excludeCountries = props.excludeCountries,\n    placeholder = props.placeholder,\n    preferredCountries = props.preferredCountries;\n  var _useState = useState({\n      visible: props.visible || false,\n      countries: [],\n      filter: '',\n      filterFocus: false\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    state = _useState2[0],\n    setState = _useState2[1];\n  var _useContext = useContext(),\n    translation = _useContext.translation,\n    getCountriesAsync = _useContext.getCountriesAsync;\n  var visible = state.visible,\n    filter = state.filter,\n    countries = state.countries,\n    filterFocus = state.filterFocus;\n  useEffect(function () {\n    if (state.visible !== props.visible) {\n      setState(_objectSpread(_objectSpread({}, state), {}, {\n        visible: props.visible || false\n      }));\n    }\n  }, [props.visible]);\n  var onOpen = function onOpen() {\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      visible: true\n    }));\n    if (handleOpen) {\n      handleOpen();\n    }\n  };\n  var onClose = function onClose() {\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      filter: '',\n      visible: false\n    }));\n    if (handleClose) {\n      handleClose();\n    }\n  };\n  var setFilter = function setFilter(filter) {\n    return setState(_objectSpread(_objectSpread({}, state), {}, {\n      filter: filter\n    }));\n  };\n  var setCountries = function setCountries(countries) {\n    return setState(_objectSpread(_objectSpread({}, state), {}, {\n      countries: countries\n    }));\n  };\n  var onSelectClose = function onSelectClose(country) {\n    onSelect(country);\n    onClose();\n  };\n  var onFocus = function onFocus() {\n    return setState(_objectSpread(_objectSpread({}, state), {}, {\n      filterFocus: true\n    }));\n  };\n  var onBlur = function onBlur() {\n    return setState(_objectSpread(_objectSpread({}, state), {}, {\n      filterFocus: false\n    }));\n  };\n  var flagProp = {\n    countryCode: countryCode,\n    withEmoji: withEmoji,\n    withCountryNameButton: withCountryNameButton,\n    withCallingCodeButton: withCallingCodeButton,\n    withCurrencyButton: withCurrencyButton,\n    withFlagButton: withFlagButton,\n    renderFlagButton: renderButton,\n    onOpen: onOpen,\n    containerButtonStyle: containerButtonStyle,\n    placeholder: placeholder\n  };\n  useEffect(function () {\n    getCountriesAsync(withEmoji ? FlagType.EMOJI : FlagType.FLAT, translation, region, subregion, countryCodes, excludeCountries, preferredCountries, withAlphaFilter).then(setCountries).catch(console.warn);\n  }, [translation, withEmoji]);\n  return React.createElement(React.Fragment, null, withModal && renderFlagButton(flagProp), React.createElement(CountryModal, Object.assign({}, _objectSpread({\n    visible: visible,\n    withModal: withModal,\n    disableNativeModal: disableNativeModal\n  }, modalProps), {\n    onRequestClose: onClose,\n    onDismiss: onClose\n  }), React.createElement(HeaderModal, Object.assign({}, {\n    withFilter: withFilter,\n    onClose: onClose,\n    closeButtonImage: closeButtonImage,\n    closeButtonImageStyle: closeButtonImageStyle,\n    closeButtonStyle: closeButtonStyle,\n    withCloseButton: withCloseButton\n  }, {\n    renderFilter: function renderFilter(props) {\n      return _renderFilter(_objectSpread(_objectSpread({}, props), {}, {\n        renderCountryFilter: renderCountryFilter,\n        onChangeText: setFilter,\n        value: filter,\n        onFocus: onFocus,\n        onBlur: onBlur\n      }, filterProps));\n    }\n  })), React.createElement(CountryList, Object.assign({}, {\n    onSelect: onSelectClose,\n    data: countries,\n    letters: [],\n    withAlphaFilter: withAlphaFilter && filter === '',\n    withCallingCode: withCallingCode,\n    withCurrency: withCurrency,\n    withFlag: withFlag,\n    withEmoji: withEmoji,\n    filter: filter,\n    filterFocus: filterFocus,\n    flatListProps: flatListProps\n  }))));\n};\nCountryPicker.defaultProps = {\n  withModal: true,\n  withAlphaFilter: false,\n  withCallingCode: false,\n  placeholder: 'Select Country'\n};","map":{"version":3,"sources":["../src/CountryPicker.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { CountryModal } from './CountryModal';\nimport { HeaderModal } from './HeaderModal';\nimport { FlagType } from './types';\nimport { CountryFilter } from './CountryFilter';\nimport { FlagButton } from './FlagButton';\nimport { useContext } from './CountryContext';\nimport { CountryList } from './CountryList';\nconst renderFlagButton = (props) => props.renderFlagButton ? (props.renderFlagButton(props)) : (React.createElement(FlagButton, Object.assign({}, props)));\nconst renderFilter = (props) => props.renderCountryFilter ? (props.renderCountryFilter(props)) : (React.createElement(CountryFilter, Object.assign({}, props)));\nexport const CountryPicker = (props) => {\n    const { countryCode, region, subregion, countryCodes, renderFlagButton: renderButton, renderCountryFilter, filterProps, modalProps, flatListProps, onSelect, withEmoji, withFilter, withCloseButton, withCountryNameButton, withCallingCodeButton, withCurrencyButton, containerButtonStyle, withAlphaFilter, withCallingCode, withCurrency, withFlag, withModal, disableNativeModal, withFlagButton, onClose: handleClose, onOpen: handleOpen, closeButtonImage, closeButtonStyle, closeButtonImageStyle, excludeCountries, placeholder, preferredCountries } = props;\n    const [state, setState] = useState({\n        visible: props.visible || false,\n        countries: [],\n        filter: '',\n        filterFocus: false,\n    });\n    const { translation, getCountriesAsync } = useContext();\n    const { visible, filter, countries, filterFocus } = state;\n    useEffect(() => {\n        if (state.visible !== props.visible) {\n            setState({ ...state, visible: props.visible || false });\n        }\n    }, [props.visible]);\n    const onOpen = () => {\n        setState({ ...state, visible: true });\n        if (handleOpen) {\n            handleOpen();\n        }\n    };\n    const onClose = () => {\n        setState({ ...state, filter: '', visible: false });\n        if (handleClose) {\n            handleClose();\n        }\n    };\n    const setFilter = (filter) => setState({ ...state, filter });\n    const setCountries = (countries) => setState({ ...state, countries });\n    const onSelectClose = (country) => {\n        onSelect(country);\n        onClose();\n    };\n    const onFocus = () => setState({ ...state, filterFocus: true });\n    const onBlur = () => setState({ ...state, filterFocus: false });\n    const flagProp = {\n        countryCode,\n        withEmoji,\n        withCountryNameButton,\n        withCallingCodeButton,\n        withCurrencyButton,\n        withFlagButton,\n        renderFlagButton: renderButton,\n        onOpen,\n        containerButtonStyle,\n        placeholder,\n    };\n    useEffect(() => {\n        getCountriesAsync(withEmoji ? FlagType.EMOJI : FlagType.FLAT, translation, region, subregion, countryCodes, excludeCountries, preferredCountries, withAlphaFilter)\n            .then(setCountries)\n            .catch(console.warn);\n    }, [translation, withEmoji]);\n    return (React.createElement(React.Fragment, null,\n        withModal && renderFlagButton(flagProp),\n        React.createElement(CountryModal, Object.assign({}, { visible, withModal, disableNativeModal, ...modalProps }, { onRequestClose: onClose, onDismiss: onClose }),\n            React.createElement(HeaderModal, Object.assign({}, {\n                withFilter,\n                onClose,\n                closeButtonImage,\n                closeButtonImageStyle,\n                closeButtonStyle,\n                withCloseButton,\n            }, { renderFilter: (props) => renderFilter({\n                    ...props,\n                    renderCountryFilter,\n                    onChangeText: setFilter,\n                    value: filter,\n                    onFocus,\n                    onBlur,\n                    ...filterProps,\n                }) })),\n            React.createElement(CountryList, Object.assign({}, {\n                onSelect: onSelectClose,\n                data: countries,\n                letters: [],\n                withAlphaFilter: withAlphaFilter && filter === '',\n                withCallingCode,\n                withCurrency,\n                withFlag,\n                withEmoji,\n                filter,\n                filterFocus,\n                flatListProps,\n            })))));\n};\nCountryPicker.defaultProps = {\n    withModal: true,\n    withAlphaFilter: false,\n    withCallingCode: false,\n    placeholder: 'Select Country',\n};\n//# sourceMappingURL=CountryPicker.js.map"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { FlagType, CountryCodeList } from \"./types\";\nimport Fuse from 'fuse.js';\nvar imageJsonUrl = 'https://xcarpentier.github.io/react-native-country-picker-modal/countries/';\nvar localData = {\n  emojiCountries: undefined,\n  imageCountries: undefined\n};\nexport var loadDataAsync = function (data) {\n  return function () {\n    var dataType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : FlagType.EMOJI;\n    return new Promise(function (resolve, reject) {\n      switch (dataType) {\n        case FlagType.FLAT:\n          if (!data.imageCountries) {\n            fetch(imageJsonUrl).then(function (response) {\n              return response.json();\n            }).then(function (remoteData) {\n              data.imageCountries = remoteData;\n              resolve(data.imageCountries);\n            }).catch(reject);\n          } else {\n            resolve(data.imageCountries);\n          }\n          break;\n        default:\n          if (!data.emojiCountries) {\n            data.emojiCountries = require(\"./assets/data/countries-emoji.json\");\n            resolve(data.emojiCountries);\n          } else {\n            resolve(data.emojiCountries);\n          }\n          break;\n      }\n    });\n  };\n}(localData);\nexport var getEmojiFlagAsync = function () {\n  var _ref = _asyncToGenerator(function* () {\n    var countryCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'FR';\n    var countries = yield loadDataAsync();\n    if (!countries) {\n      throw new Error('Unable to find emoji because emojiCountries is undefined');\n    }\n    return countries[countryCode].flag;\n  });\n  return function getEmojiFlagAsync() {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var getImageFlagAsync = function () {\n  var _ref2 = _asyncToGenerator(function* () {\n    var countryCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'FR';\n    var countries = yield loadDataAsync(FlagType.FLAT);\n    if (!countries) {\n      throw new Error('Unable to find image because imageCountries is undefined');\n    }\n    return countries[countryCode].flag;\n  });\n  return function getImageFlagAsync() {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var getCountryNameAsync = function () {\n  var _ref3 = _asyncToGenerator(function* () {\n    var countryCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'FR';\n    var translation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'common';\n    var countries = yield loadDataAsync();\n    if (!countries) {\n      throw new Error('Unable to find image because imageCountries is undefined');\n    }\n    return countries[countryCode].name ? countries[countryCode].name[translation] : countries[countryCode].name['common'];\n  });\n  return function getCountryNameAsync() {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var getCountryCallingCodeAsync = function () {\n  var _ref4 = _asyncToGenerator(function* (countryCode) {\n    var countries = yield loadDataAsync();\n    if (!countries) {\n      throw new Error('Unable to find image because imageCountries is undefined');\n    }\n    return countries[countryCode].callingCode[0];\n  });\n  return function getCountryCallingCodeAsync(_x) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var getCountryCurrencyAsync = function () {\n  var _ref5 = _asyncToGenerator(function* (countryCode) {\n    var countries = yield loadDataAsync();\n    if (!countries) {\n      throw new Error('Unable to find image because imageCountries is undefined');\n    }\n    return countries[countryCode].currency[0];\n  });\n  return function getCountryCurrencyAsync(_x2) {\n    return _ref5.apply(this, arguments);\n  };\n}();\nvar isCountryPresent = function isCountryPresent(countries) {\n  return function (countryCode) {\n    return !!countries[countryCode];\n  };\n};\nvar isRegion = function isRegion(region) {\n  return function (country) {\n    return region ? country.region === region : true;\n  };\n};\nvar isSubregion = function isSubregion(subregion) {\n  return function (country) {\n    return subregion ? country.subregion === subregion : true;\n  };\n};\nvar isIncluded = function isIncluded(countryCodes) {\n  return function (country) {\n    return countryCodes && countryCodes.length > 0 ? countryCodes.includes(country.cca2) : true;\n  };\n};\nvar isExcluded = function isExcluded(excludeCountries) {\n  return function (country) {\n    return excludeCountries && excludeCountries.length > 0 ? !excludeCountries.includes(country.cca2) : true;\n  };\n};\nexport var getCountriesAsync = function () {\n  var _ref6 = _asyncToGenerator(function* (flagType) {\n    var translation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'common';\n    var region = arguments.length > 2 ? arguments[2] : undefined;\n    var subregion = arguments.length > 3 ? arguments[3] : undefined;\n    var countryCodes = arguments.length > 4 ? arguments[4] : undefined;\n    var excludeCountries = arguments.length > 5 ? arguments[5] : undefined;\n    var preferredCountries = arguments.length > 6 ? arguments[6] : undefined;\n    var withAlphaFilter = arguments.length > 7 ? arguments[7] : undefined;\n    var countriesRaw = yield loadDataAsync(flagType);\n    if (!countriesRaw) {\n      return [];\n    }\n    if (preferredCountries && !withAlphaFilter) {\n      var newCountryCodeList = [].concat(_toConsumableArray(preferredCountries), _toConsumableArray(CountryCodeList.filter(function (code) {\n        return !preferredCountries.includes(code);\n      })));\n      var countries = newCountryCodeList.filter(isCountryPresent(countriesRaw)).map(function (cca2) {\n        return _objectSpread({\n          cca2: cca2\n        }, _objectSpread(_objectSpread({}, countriesRaw[cca2]), {}, {\n          name: countriesRaw[cca2].name[translation] || countriesRaw[cca2].name['common']\n        }));\n      }).filter(isRegion(region)).filter(isSubregion(subregion)).filter(isIncluded(countryCodes)).filter(isExcluded(excludeCountries));\n      return countries;\n    } else {\n      var _countries = CountryCodeList.filter(isCountryPresent(countriesRaw)).map(function (cca2) {\n        return _objectSpread({\n          cca2: cca2\n        }, _objectSpread(_objectSpread({}, countriesRaw[cca2]), {}, {\n          name: countriesRaw[cca2].name[translation] || countriesRaw[cca2].name['common']\n        }));\n      }).filter(isRegion(region)).filter(isSubregion(subregion)).filter(isIncluded(countryCodes)).filter(isExcluded(excludeCountries)).sort(function (country1, country2) {\n        return country1.name.localeCompare(country2.name);\n      });\n      return _countries;\n    }\n  });\n  return function getCountriesAsync(_x3) {\n    return _ref6.apply(this, arguments);\n  };\n}();\nvar DEFAULT_FUSE_OPTION = {\n  shouldSort: true,\n  threshold: 0.3,\n  location: 0,\n  distance: 100,\n  maxPatternLength: 32,\n  minMatchCharLength: 1,\n  keys: ['name', 'cca2', 'callingCode']\n};\nvar fuse;\nexport var search = function search() {\n  var filter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_FUSE_OPTION;\n  if (data.length === 0) {\n    return [];\n  }\n  if (!fuse) {\n    fuse = new Fuse(data, options);\n  }\n  if (filter && filter !== '') {\n    var result = fuse.search(filter);\n    return result;\n  } else {\n    return data;\n  }\n};\nvar uniq = function uniq(arr) {\n  return Array.from(new Set(arr));\n};\nexport var getLetters = function getLetters(countries) {\n  return uniq(countries.map(function (country) {\n    return country.name.substr(0, 1).toLocaleUpperCase();\n  }).sort(function (l1, l2) {\n    return l1.localeCompare(l2);\n  }));\n};\nexport var getCountryInfoAsync = function () {\n  var _ref8 = _asyncToGenerator(function* (_ref7) {\n    var countryCode = _ref7.countryCode,\n      translation = _ref7.translation;\n    var countryName = yield getCountryNameAsync(countryCode, translation || 'common');\n    var currency = yield getCountryCurrencyAsync(countryCode);\n    var callingCode = yield getCountryCallingCodeAsync(countryCode);\n    return {\n      countryName: countryName,\n      currency: currency,\n      callingCode: callingCode\n    };\n  });\n  return function getCountryInfoAsync(_x4) {\n    return _ref8.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["../src/CountryService.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { FlagType, CountryCodeList, } from './types';\nimport Fuse from 'fuse.js';\nconst imageJsonUrl = 'https://xcarpentier.github.io/react-native-country-picker-modal/countries/';\nconst localData = {\n    emojiCountries: undefined,\n    imageCountries: undefined,\n};\nexport const loadDataAsync = ((data) => (dataType = FlagType.EMOJI) => {\n    return new Promise((resolve, reject) => {\n        switch (dataType) {\n            case FlagType.FLAT:\n                if (!data.imageCountries) {\n                    fetch(imageJsonUrl)\n                        .then((response) => response.json())\n                        .then((remoteData) => {\n                        data.imageCountries = remoteData;\n                        resolve(data.imageCountries);\n                    })\n                        .catch(reject);\n                }\n                else {\n                    resolve(data.imageCountries);\n                }\n                break;\n            default:\n                if (!data.emojiCountries) {\n                    data.emojiCountries = require('./assets/data/countries-emoji.json');\n                    resolve(data.emojiCountries);\n                }\n                else {\n                    resolve(data.emojiCountries);\n                }\n                break;\n        }\n    });\n})(localData);\nexport const getEmojiFlagAsync = async (countryCode = 'FR') => {\n    const countries = await loadDataAsync();\n    if (!countries) {\n        throw new Error('Unable to find emoji because emojiCountries is undefined');\n    }\n    return countries[countryCode].flag;\n};\nexport const getImageFlagAsync = async (countryCode = 'FR') => {\n    const countries = await loadDataAsync(FlagType.FLAT);\n    if (!countries) {\n        throw new Error('Unable to find image because imageCountries is undefined');\n    }\n    return countries[countryCode].flag;\n};\nexport const getCountryNameAsync = async (countryCode = 'FR', translation = 'common') => {\n    const countries = await loadDataAsync();\n    if (!countries) {\n        throw new Error('Unable to find image because imageCountries is undefined');\n    }\n    return countries[countryCode].name\n        ? countries[countryCode].name[translation]\n        : countries[countryCode].name['common'];\n};\nexport const getCountryCallingCodeAsync = async (countryCode) => {\n    const countries = await loadDataAsync();\n    if (!countries) {\n        throw new Error('Unable to find image because imageCountries is undefined');\n    }\n    return countries[countryCode].callingCode[0];\n};\nexport const getCountryCurrencyAsync = async (countryCode) => {\n    const countries = await loadDataAsync();\n    if (!countries) {\n        throw new Error('Unable to find image because imageCountries is undefined');\n    }\n    return countries[countryCode].currency[0];\n};\nconst isCountryPresent = (countries) => (countryCode) => !!countries[countryCode];\nconst isRegion = (region) => (country) => region ? country.region === region : true;\nconst isSubregion = (subregion) => (country) => subregion ? country.subregion === subregion : true;\nconst isIncluded = (countryCodes) => (country) => countryCodes && countryCodes.length > 0\n    ? countryCodes.includes(country.cca2)\n    : true;\nconst isExcluded = (excludeCountries) => (country) => excludeCountries && excludeCountries.length > 0\n    ? !excludeCountries.includes(country.cca2)\n    : true;\nexport const getCountriesAsync = async (flagType, translation = 'common', region, subregion, countryCodes, excludeCountries, preferredCountries, withAlphaFilter) => {\n    const countriesRaw = await loadDataAsync(flagType);\n    if (!countriesRaw) {\n        return [];\n    }\n    if (preferredCountries && !withAlphaFilter) {\n        const newCountryCodeList = [...preferredCountries, ...CountryCodeList.filter(code => !preferredCountries.includes(code))];\n        const countries = newCountryCodeList.filter(isCountryPresent(countriesRaw))\n            .map((cca2) => ({\n            cca2,\n            ...{\n                ...countriesRaw[cca2],\n                name: countriesRaw[cca2].name[translation] ||\n                    countriesRaw[cca2].name['common'],\n            },\n        }))\n            .filter(isRegion(region))\n            .filter(isSubregion(subregion))\n            .filter(isIncluded(countryCodes))\n            .filter(isExcluded(excludeCountries));\n        return countries;\n    }\n    else {\n        const countries = CountryCodeList.filter(isCountryPresent(countriesRaw))\n            .map((cca2) => ({\n            cca2,\n            ...{\n                ...countriesRaw[cca2],\n                name: countriesRaw[cca2].name[translation] ||\n                    countriesRaw[cca2].name['common'],\n            },\n        }))\n            .filter(isRegion(region))\n            .filter(isSubregion(subregion))\n            .filter(isIncluded(countryCodes))\n            .filter(isExcluded(excludeCountries))\n            .sort((country1, country2) => country1.name.localeCompare(country2.name));\n        return countries;\n    }\n};\nconst DEFAULT_FUSE_OPTION = {\n    shouldSort: true,\n    threshold: 0.3,\n    location: 0,\n    distance: 100,\n    maxPatternLength: 32,\n    minMatchCharLength: 1,\n    keys: ['name', 'cca2', 'callingCode'],\n};\nlet fuse;\nexport const search = (filter = '', data = [], options = DEFAULT_FUSE_OPTION) => {\n    if (data.length === 0) {\n        return [];\n    }\n    if (!fuse) {\n        fuse = new Fuse(data, options);\n    }\n    if (filter && filter !== '') {\n        const result = fuse.search(filter);\n        return result;\n    }\n    else {\n        return data;\n    }\n};\nconst uniq = (arr) => Array.from(new Set(arr));\nexport const getLetters = (countries) => {\n    return uniq(countries\n        .map((country) => country.name.substr(0, 1).toLocaleUpperCase())\n        .sort((l1, l2) => l1.localeCompare(l2)));\n};\nexport const getCountryInfoAsync = async ({ countryCode, translation, }) => {\n    const countryName = await getCountryNameAsync(countryCode, translation || 'common');\n    const currency = await getCountryCurrencyAsync(countryCode);\n    const callingCode = await getCountryCallingCodeAsync(countryCode);\n    return { countryName, currency, callingCode };\n};\n//# sourceMappingURL=CountryService.js.map"]},"metadata":{},"sourceType":"module"}
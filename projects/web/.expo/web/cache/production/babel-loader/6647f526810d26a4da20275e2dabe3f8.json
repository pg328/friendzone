{"ast":null,"code":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=exports.Gestures=void 0;var _constants=require(\"./web/constants\");var _FlingGestureHandler=_interopRequireDefault(require(\"./web/FlingGestureHandler\"));var _LongPressGestureHandler=_interopRequireDefault(require(\"./web/LongPressGestureHandler\"));var _NativeViewGestureHandler=_interopRequireDefault(require(\"./web/NativeViewGestureHandler\"));var NodeManager=_interopRequireWildcard(require(\"./web/NodeManager\"));var _PanGestureHandler=_interopRequireDefault(require(\"./web/PanGestureHandler\"));var _PinchGestureHandler=_interopRequireDefault(require(\"./web/PinchGestureHandler\"));var _RotationGestureHandler=_interopRequireDefault(require(\"./web/RotationGestureHandler\"));var _TapGestureHandler=_interopRequireDefault(require(\"./web/TapGestureHandler\"));function _getRequireWildcardCache(){if(typeof WeakMap!==\"function\")return null;var cache=new WeakMap();_getRequireWildcardCache=function _getRequireWildcardCache(){return cache;};return cache;}function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj;}if(obj===null||typeof obj!==\"object\"&&typeof obj!==\"function\"){return{default:obj};}var cache=_getRequireWildcardCache();if(cache&&cache.has(obj)){return cache.get(obj);}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc);}else{newObj[key]=obj[key];}}}newObj.default=obj;if(cache){cache.set(obj,newObj);}return newObj;}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var Gestures={PanGestureHandler:_PanGestureHandler.default,RotationGestureHandler:_RotationGestureHandler.default,PinchGestureHandler:_PinchGestureHandler.default,TapGestureHandler:_TapGestureHandler.default,NativeViewGestureHandler:_NativeViewGestureHandler.default,LongPressGestureHandler:_LongPressGestureHandler.default,FlingGestureHandler:_FlingGestureHandler.default};exports.Gestures=Gestures;var _default={Direction:_constants.Direction,handleSetJSResponder:function handleSetJSResponder(tag,blockNativeResponder){console.warn('handleSetJSResponder: ',tag,blockNativeResponder);},handleClearJSResponder:function handleClearJSResponder(){console.warn('handleClearJSResponder: ');},createGestureHandler:function createGestureHandler(handlerName,handlerTag,config){if(!(handlerName in Gestures))throw new Error(\"react-native-gesture-handler: \"+handlerName+\" is not supported on web.\");var GestureClass=Gestures[handlerName];NodeManager.createGestureHandler(handlerTag,new GestureClass());this.updateGestureHandler(handlerTag,config);},attachGestureHandler:function attachGestureHandler(handlerTag,newView,_actionType,propsRef){NodeManager.getHandler(handlerTag).setView(newView,propsRef);},updateGestureHandler:function updateGestureHandler(handlerTag,newConfig){NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);},getGestureHandlerNode:function getGestureHandlerNode(handlerTag){return NodeManager.getHandler(handlerTag);},dropGestureHandler:function dropGestureHandler(handlerTag){NodeManager.dropGestureHandler(handlerTag);},flushOperations:function flushOperations(){}};exports.default=_default;","map":{"version":3,"sources":["RNGestureHandlerModule.web.ts"],"names":["Gestures","PanGestureHandler","RotationGestureHandler","PinchGestureHandler","TapGestureHandler","NativeViewGestureHandler","LongPressGestureHandler","FlingGestureHandler","Direction","handleSetJSResponder","tag","blockNativeResponder","console","warn","handleClearJSResponder","createGestureHandler","handlerName","handlerTag","config","Error","GestureClass","NodeManager","updateGestureHandler","attachGestureHandler","newView","_actionType","propsRef","getHandler","setView","newConfig","updateGestureConfig","getGestureHandlerNode","dropGestureHandler","flushOperations"],"mappings":"8GACA,GAAA,WAAA,CAAA,OAAA,mBAAA,CACA,GAAA,qBAAA,CAAA,sBAAA,CAAA,OAAA,6BAAA,CAAA,CACA,GAAA,yBAAA,CAAA,sBAAA,CAAA,OAAA,iCAAA,CAAA,CACA,GAAA,0BAAA,CAAA,sBAAA,CAAA,OAAA,kCAAA,CAAA,CACA,GAAA,YAAA,CAAA,uBAAA,CAAA,OAAA,qBAAA,CAAA,CACA,GAAA,mBAAA,CAAA,sBAAA,CAAA,OAAA,2BAAA,CAAA,CACA,GAAA,qBAAA,CAAA,sBAAA,CAAA,OAAA,6BAAA,CAAA,CACA,GAAA,wBAAA,CAAA,sBAAA,CAAA,OAAA,gCAAA,CAAA,CACA,GAAA,mBAAA,CAAA,sBAAA,CAAA,OAAA,2BAAA,CAAA,C,i6BAEO,GAAMA,SAAQ,CAAG,CACtBC,iBAAiB,CAAjBA,kBAAAA,CAAAA,OADsB,CAEtBC,sBAAsB,CAAtBA,uBAAAA,CAAAA,OAFsB,CAGtBC,mBAAmB,CAAnBA,oBAAAA,CAAAA,OAHsB,CAItBC,iBAAiB,CAAjBA,kBAAAA,CAAAA,OAJsB,CAKtBC,wBAAwB,CAAxBA,yBAAAA,CAAAA,OALsB,CAMtBC,uBAAuB,CAAvBA,wBAAAA,CAAAA,OANsB,CAOtBC,mBAAmB,CAAnBA,oBAAAA,CAPsB,OAAA,CAAjB,C,uCAWQ,CACbC,SAAS,CAATA,UAAAA,CAAAA,SADa,CAEbC,oBAAoB,+BAACC,GAAD,CAAcC,oBAAd,CAA6C,CAC/DC,OAAO,CAACC,IAARD,CAAa,wBAAbA,CAAuCF,GAAvCE,CAA4CD,oBAA5CC,CAAAA,CACD,CAJY,CAKbE,sBAAsB,kCAAG,CACvBF,OAAO,CAACC,IAARD,CAAa,0BAAbA,CAAAA,CACD,CAPY,CAQbG,oBAAoB,+BAClBC,WADkB,CAElBC,UAFkB,CAGlBC,MAHkB,CAIlB,CAEA,GAAI,EAAEF,WAAW,GAAIhB,SAAjB,CAAJ,CACE,KAAM,IAAImB,MAAJ,kCAC6BH,WAD7B,6BAAN,CAGF,GAAMI,aAAY,CAAGpB,QAAQ,CAACgB,WAAD,CAA7B,CACAK,WAAW,CAACN,oBAAZM,CAAiCJ,UAAjCI,CAA6C,GAAID,aAAJ,EAA7CC,CAAAA,CACA,IAAA,CAAKC,oBAAL,CAA0BL,UAA1B,CAAsCC,MAAtC,CAAA,CACD,CArBY,CAsBbK,oBAAoB,+BAClBN,UADkB,CAElBO,OAFkB,CAGlBC,WAHkB,CAIlBC,QAJkB,CAKlB,CACAL,WAAW,CAACM,UAAZN,CAAuBJ,UAAvBI,CAAAA,CAAmCO,OAAnCP,CAA2CG,OAA3CH,CAAoDK,QAApDL,CAAAA,CACD,CA7BY,CA8BbC,oBAAoB,+BAACL,UAAD,CAAqBY,SAArB,CAAqC,CACvDR,WAAW,CAACM,UAAZN,CAAuBJ,UAAvBI,CAAAA,CAAmCS,mBAAnCT,CAAuDQ,SAAvDR,CAAAA,CACD,CAhCY,CAiCbU,qBAAqB,gCAACd,UAAD,CAAqB,CACxC,MAAOI,YAAW,CAACM,UAAZN,CAAuBJ,UAAvBI,CAAP,CACD,CAnCY,CAoCbW,kBAAkB,6BAACf,UAAD,CAAqB,CACrCI,WAAW,CAACW,kBAAZX,CAA+BJ,UAA/BI,CAAAA,CACD,CAtCY,CAwCbY,eAAe,2BAAG,CAAE,CAxCP,C","sourcesContent":["import { ActionType } from './ActionType';\nimport { Direction } from './web/constants';\nimport FlingGestureHandler from './web/FlingGestureHandler';\nimport LongPressGestureHandler from './web/LongPressGestureHandler';\nimport NativeViewGestureHandler from './web/NativeViewGestureHandler';\nimport * as NodeManager from './web/NodeManager';\nimport PanGestureHandler from './web/PanGestureHandler';\nimport PinchGestureHandler from './web/PinchGestureHandler';\nimport RotationGestureHandler from './web/RotationGestureHandler';\nimport TapGestureHandler from './web/TapGestureHandler';\n\nexport const Gestures = {\n  PanGestureHandler,\n  RotationGestureHandler,\n  PinchGestureHandler,\n  TapGestureHandler,\n  NativeViewGestureHandler,\n  LongPressGestureHandler,\n  FlingGestureHandler,\n  // ForceTouchGestureHandler,\n};\n\nexport default {\n  Direction,\n  handleSetJSResponder(tag: number, blockNativeResponder: boolean) {\n    console.warn('handleSetJSResponder: ', tag, blockNativeResponder);\n  },\n  handleClearJSResponder() {\n    console.warn('handleClearJSResponder: ');\n  },\n  createGestureHandler<T>(\n    handlerName: keyof typeof Gestures,\n    handlerTag: number,\n    config: T\n  ) {\n    //TODO(TS) extends config\n    if (!(handlerName in Gestures))\n      throw new Error(\n        `react-native-gesture-handler: ${handlerName} is not supported on web.`\n      );\n    const GestureClass = Gestures[handlerName];\n    NodeManager.createGestureHandler(handlerTag, new GestureClass());\n    this.updateGestureHandler(handlerTag, config);\n  },\n  attachGestureHandler(\n    handlerTag: number,\n    newView: number,\n    _actionType: ActionType,\n    propsRef: React.RefObject<unknown>\n  ) {\n    NodeManager.getHandler(handlerTag).setView(newView, propsRef);\n  },\n  updateGestureHandler(handlerTag: number, newConfig: any) {\n    NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n  },\n  getGestureHandlerNode(handlerTag: number) {\n    return NodeManager.getHandler(handlerTag);\n  },\n  dropGestureHandler(handlerTag: number) {\n    NodeManager.dropGestureHandler(handlerTag);\n  },\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  flushOperations() {},\n};\n"]},"metadata":{},"sourceType":"script"}
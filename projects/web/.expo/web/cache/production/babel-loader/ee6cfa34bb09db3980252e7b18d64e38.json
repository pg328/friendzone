{"ast":null,"code":"import DeviceEventEmitter from\"react-native-web/dist/exports/DeviceEventEmitter\";import{State}from\"../../State\";import{TouchEventType}from\"../../TouchEventType\";import{findHandler,findOldGestureHandler}from\"../handlersRegistry\";import{tagMessage}from\"../../utils\";var gestureHandlerEventSubscription=null;var gestureHandlerStateChangeEventSubscription=null;var warningMessage=tagMessage('You have to use react-native-reanimated in order to control the state of the gesture.');var dummyStateManager={begin:function begin(){console.warn(warningMessage);},activate:function activate(){console.warn(warningMessage);},end:function end(){console.warn(warningMessage);},fail:function fail(){console.warn(warningMessage);}};var lastUpdateEvent=[];function isStateChangeEvent(event){return event.oldState!=null;}function isTouchEvent(event){return event.eventType!=null;}export function onGestureHandlerEvent(event){var _handler$handlers7,_handler$handlers7$on,_handler$handlers8,_handler$handlers8$on,_handler$handlers9,_handler$handlers9$on,_handler$handlers10,_handler$handlers10$o;var handler=findHandler(event.handlerTag);if(handler){if(isStateChangeEvent(event)){if(event.oldState===State.UNDETERMINED&&event.state===State.BEGAN){var _handler$handlers$onB,_handler$handlers;(_handler$handlers$onB=(_handler$handlers=handler.handlers).onBegin)===null||_handler$handlers$onB===void 0?void 0:_handler$handlers$onB.call(_handler$handlers,event);}else if((event.oldState===State.BEGAN||event.oldState===State.UNDETERMINED)&&event.state===State.ACTIVE){var _handler$handlers$onS,_handler$handlers2;(_handler$handlers$onS=(_handler$handlers2=handler.handlers).onStart)===null||_handler$handlers$onS===void 0?void 0:_handler$handlers$onS.call(_handler$handlers2,event);lastUpdateEvent[handler.handlers.handlerTag]=event;}else if(event.oldState!==event.state&&event.state===State.END){var _handler$handlers$onF,_handler$handlers4;if(event.oldState===State.ACTIVE){var _handler$handlers$onE,_handler$handlers3;(_handler$handlers$onE=(_handler$handlers3=handler.handlers).onEnd)===null||_handler$handlers$onE===void 0?void 0:_handler$handlers$onE.call(_handler$handlers3,event,true);}(_handler$handlers$onF=(_handler$handlers4=handler.handlers).onFinalize)===null||_handler$handlers$onF===void 0?void 0:_handler$handlers$onF.call(_handler$handlers4,event,true);lastUpdateEvent[handler.handlers.handlerTag]=undefined;}else if((event.state===State.FAILED||event.state===State.CANCELLED)&&event.oldState!==event.state){var _handler$handlers$onF2,_handler$handlers6;if(event.oldState===State.ACTIVE){var _handler$handlers$onE2,_handler$handlers5;(_handler$handlers$onE2=(_handler$handlers5=handler.handlers).onEnd)===null||_handler$handlers$onE2===void 0?void 0:_handler$handlers$onE2.call(_handler$handlers5,event,false);}(_handler$handlers$onF2=(_handler$handlers6=handler.handlers).onFinalize)===null||_handler$handlers$onF2===void 0?void 0:_handler$handlers$onF2.call(_handler$handlers6,event,false);lastUpdateEvent[handler.handlers.handlerTag]=undefined;}}else if(isTouchEvent(event)){switch(event.eventType){case TouchEventType.TOUCHES_DOWN:(_handler$handlers7=handler.handlers)===null||_handler$handlers7===void 0?void 0:(_handler$handlers7$on=_handler$handlers7.onTouchesDown)===null||_handler$handlers7$on===void 0?void 0:_handler$handlers7$on.call(_handler$handlers7,event,dummyStateManager);break;case TouchEventType.TOUCHES_MOVE:(_handler$handlers8=handler.handlers)===null||_handler$handlers8===void 0?void 0:(_handler$handlers8$on=_handler$handlers8.onTouchesMove)===null||_handler$handlers8$on===void 0?void 0:_handler$handlers8$on.call(_handler$handlers8,event,dummyStateManager);break;case TouchEventType.TOUCHES_UP:(_handler$handlers9=handler.handlers)===null||_handler$handlers9===void 0?void 0:(_handler$handlers9$on=_handler$handlers9.onTouchesUp)===null||_handler$handlers9$on===void 0?void 0:_handler$handlers9$on.call(_handler$handlers9,event,dummyStateManager);break;case TouchEventType.TOUCHES_CANCELLED:(_handler$handlers10=handler.handlers)===null||_handler$handlers10===void 0?void 0:(_handler$handlers10$o=_handler$handlers10.onTouchesCancelled)===null||_handler$handlers10$o===void 0?void 0:_handler$handlers10$o.call(_handler$handlers10,event,dummyStateManager);break;}}else{var _handler$handlers$onU,_handler$handlers11;(_handler$handlers$onU=(_handler$handlers11=handler.handlers).onUpdate)===null||_handler$handlers$onU===void 0?void 0:_handler$handlers$onU.call(_handler$handlers11,event);if(handler.handlers.onChange&&handler.handlers.changeEventCalculator){var _handler$handlers$onC,_handler$handlers12,_handler$handlers$cha,_handler$handlers13;(_handler$handlers$onC=(_handler$handlers12=handler.handlers).onChange)===null||_handler$handlers$onC===void 0?void 0:_handler$handlers$onC.call(_handler$handlers12,(_handler$handlers$cha=(_handler$handlers13=handler.handlers).changeEventCalculator)===null||_handler$handlers$cha===void 0?void 0:_handler$handlers$cha.call(_handler$handlers13,event,lastUpdateEvent[handler.handlers.handlerTag]));lastUpdateEvent[handler.handlers.handlerTag]=event;}}}else{var oldHandler=findOldGestureHandler(event.handlerTag);if(oldHandler){var nativeEvent={nativeEvent:event};if(isStateChangeEvent(event)){oldHandler.onGestureStateChange(nativeEvent);}else{oldHandler.onGestureEvent(nativeEvent);}return;}}}export function startListening(){stopListening();gestureHandlerEventSubscription=DeviceEventEmitter.addListener('onGestureHandlerEvent',onGestureHandlerEvent);gestureHandlerStateChangeEventSubscription=DeviceEventEmitter.addListener('onGestureHandlerStateChange',onGestureHandlerEvent);}export function stopListening(){if(gestureHandlerEventSubscription){gestureHandlerEventSubscription.remove();gestureHandlerEventSubscription=null;}if(gestureHandlerStateChangeEventSubscription){gestureHandlerStateChangeEventSubscription.remove();gestureHandlerStateChangeEventSubscription=null;}}","map":{"version":3,"sources":["eventReceiver.ts"],"names":["State","TouchEventType","findHandler","findOldGestureHandler","tagMessage","gestureHandlerEventSubscription","gestureHandlerStateChangeEventSubscription","warningMessage","dummyStateManager","begin","console","warn","activate","end","fail","lastUpdateEvent","isStateChangeEvent","event","oldState","isTouchEvent","eventType","onGestureHandlerEvent","handler","handlerTag","UNDETERMINED","state","BEGAN","handlers","onBegin","ACTIVE","onStart","END","onEnd","onFinalize","undefined","FAILED","CANCELLED","TOUCHES_DOWN","onTouchesDown","TOUCHES_MOVE","onTouchesMove","TOUCHES_UP","onTouchesUp","TOUCHES_CANCELLED","onTouchesCancelled","onUpdate","onChange","changeEventCalculator","oldHandler","nativeEvent","onGestureStateChange","onGestureEvent","startListening","stopListening","DeviceEventEmitter","addListener","remove"],"mappings":"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","sourcesContent":["import { DeviceEventEmitter, EmitterSubscription } from 'react-native';\nimport { State } from '../../State';\nimport { TouchEventType } from '../../TouchEventType';\nimport {\n  GestureTouchEvent,\n  GestureUpdateEvent,\n  GestureStateChangeEvent,\n} from '../gestureHandlerCommon';\nimport { GestureStateManagerType } from './gestureStateManager';\nimport { findHandler, findOldGestureHandler } from '../handlersRegistry';\nimport { BaseGesture } from './gesture';\nimport { tagMessage } from '../../utils';\n\nlet gestureHandlerEventSubscription: EmitterSubscription | null = null;\nlet gestureHandlerStateChangeEventSubscription: EmitterSubscription | null = null;\n\nconst warningMessage = tagMessage(\n  'You have to use react-native-reanimated in order to control the state of the gesture.'\n);\n\nconst dummyStateManager: GestureStateManagerType = {\n  begin: () => {\n    console.warn(warningMessage);\n  },\n  activate: () => {\n    console.warn(warningMessage);\n  },\n  end: () => {\n    console.warn(warningMessage);\n  },\n  fail: () => {\n    console.warn(warningMessage);\n  },\n};\n\nconst lastUpdateEvent: (GestureUpdateEvent | undefined)[] = [];\n\nfunction isStateChangeEvent(\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n): event is GestureStateChangeEvent {\n  // @ts-ignore oldState doesn't exist on GestureTouchEvent and that's the point\n  return event.oldState != null;\n}\n\nfunction isTouchEvent(\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n): event is GestureTouchEvent {\n  return event.eventType != null;\n}\n\nexport function onGestureHandlerEvent(\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n) {\n  const handler = findHandler(event.handlerTag) as BaseGesture<\n    Record<string, unknown>\n  >;\n\n  if (handler) {\n    if (isStateChangeEvent(event)) {\n      if (\n        event.oldState === State.UNDETERMINED &&\n        event.state === State.BEGAN\n      ) {\n        handler.handlers.onBegin?.(event);\n      } else if (\n        (event.oldState === State.BEGAN ||\n          event.oldState === State.UNDETERMINED) &&\n        event.state === State.ACTIVE\n      ) {\n        handler.handlers.onStart?.(event);\n        lastUpdateEvent[handler.handlers.handlerTag] = event;\n      } else if (event.oldState !== event.state && event.state === State.END) {\n        if (event.oldState === State.ACTIVE) {\n          handler.handlers.onEnd?.(event, true);\n        }\n        handler.handlers.onFinalize?.(event, true);\n        lastUpdateEvent[handler.handlers.handlerTag] = undefined;\n      } else if (\n        (event.state === State.FAILED || event.state === State.CANCELLED) &&\n        event.oldState !== event.state\n      ) {\n        if (event.oldState === State.ACTIVE) {\n          handler.handlers.onEnd?.(event, false);\n        }\n        handler.handlers.onFinalize?.(event, false);\n        lastUpdateEvent[handler.handlers.handlerTag] = undefined;\n      }\n    } else if (isTouchEvent(event)) {\n      switch (event.eventType) {\n        case TouchEventType.TOUCHES_DOWN:\n          handler.handlers?.onTouchesDown?.(event, dummyStateManager);\n          break;\n        case TouchEventType.TOUCHES_MOVE:\n          handler.handlers?.onTouchesMove?.(event, dummyStateManager);\n          break;\n        case TouchEventType.TOUCHES_UP:\n          handler.handlers?.onTouchesUp?.(event, dummyStateManager);\n          break;\n        case TouchEventType.TOUCHES_CANCELLED:\n          handler.handlers?.onTouchesCancelled?.(event, dummyStateManager);\n          break;\n      }\n    } else {\n      handler.handlers.onUpdate?.(event);\n\n      if (handler.handlers.onChange && handler.handlers.changeEventCalculator) {\n        handler.handlers.onChange?.(\n          handler.handlers.changeEventCalculator?.(\n            event,\n            lastUpdateEvent[handler.handlers.handlerTag]\n          )\n        );\n\n        lastUpdateEvent[handler.handlers.handlerTag] = event;\n      }\n    }\n  } else {\n    const oldHandler = findOldGestureHandler(event.handlerTag);\n    if (oldHandler) {\n      const nativeEvent = { nativeEvent: event };\n      if (isStateChangeEvent(event)) {\n        oldHandler.onGestureStateChange(nativeEvent);\n      } else {\n        oldHandler.onGestureEvent(nativeEvent);\n      }\n      return;\n    }\n  }\n}\n\nexport function startListening() {\n  stopListening();\n\n  gestureHandlerEventSubscription = DeviceEventEmitter.addListener(\n    'onGestureHandlerEvent',\n    onGestureHandlerEvent\n  );\n\n  gestureHandlerStateChangeEventSubscription = DeviceEventEmitter.addListener(\n    'onGestureHandlerStateChange',\n    onGestureHandlerEvent\n  );\n}\n\nexport function stopListening() {\n  if (gestureHandlerEventSubscription) {\n    gestureHandlerEventSubscription.remove();\n    gestureHandlerEventSubscription = null;\n  }\n\n  if (gestureHandlerStateChangeEventSubscription) {\n    gestureHandlerStateChangeEventSubscription.remove();\n    gestureHandlerStateChangeEventSubscription = null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"\"use strict\";var _toConsumableArray=require(\"@babel/runtime/helpers/toConsumableArray\");var _classCallCheck=require(\"@babel/runtime/helpers/classCallCheck\");var _createClass=require(\"@babel/runtime/helpers/createClass\");var _inherits=require(\"@babel/runtime/helpers/inherits\");var _possibleConstructorReturn=require(\"@babel/runtime/helpers/possibleConstructorReturn\");var _getPrototypeOf=require(\"@babel/runtime/helpers/getPrototypeOf\");function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}Object.defineProperty(exports,\"__esModule\",{value:true});exports.ForceTouchGestureHandler=exports.forceTouchHandlerName=exports.forceTouchGestureHandlerProps=void 0;var _react=_interopRequireDefault(require(\"react\"));var _utils=require(\"../utils\");var _PlatformConstants=_interopRequireDefault(require(\"../PlatformConstants\"));var _createHandler=_interopRequireDefault(require(\"./createHandler\"));var _gestureHandlerCommon=require(\"./gestureHandlerCommon\");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}var forceTouchGestureHandlerProps=['minForce','maxForce','feedbackOnActivation'];exports.forceTouchGestureHandlerProps=forceTouchGestureHandlerProps;var ForceTouchFallback=function(_react$default$Compon){_inherits(ForceTouchFallback,_react$default$Compon);var _super=_createSuper(ForceTouchFallback);function ForceTouchFallback(){_classCallCheck(this,ForceTouchFallback);return _super.apply(this,arguments);}_createClass(ForceTouchFallback,[{key:\"componentDidMount\",value:function componentDidMount(){console.warn((0,_utils.tagMessage)('ForceTouchGestureHandler is not available on this platform. Please use ForceTouchGestureHandler.forceTouchAvailable to conditionally render other components that would provide a fallback behavior specific to your usecase'));}},{key:\"render\",value:function render(){return this.props.children;}}]);return ForceTouchFallback;}(_react.default.Component);_defineProperty(ForceTouchFallback,\"forceTouchAvailable\",false);var forceTouchHandlerName='ForceTouchGestureHandler';exports.forceTouchHandlerName=forceTouchHandlerName;var ForceTouchGestureHandler=_PlatformConstants.default!==null&&_PlatformConstants.default!==void 0&&_PlatformConstants.default.forceTouchAvailable?(0,_createHandler.default)({name:forceTouchHandlerName,allowedProps:[].concat(_toConsumableArray(_gestureHandlerCommon.baseGestureHandlerProps),forceTouchGestureHandlerProps),config:{}}):ForceTouchFallback;exports.ForceTouchGestureHandler=ForceTouchGestureHandler;ForceTouchGestureHandler.forceTouchAvailable=(_PlatformConstants.default===null||_PlatformConstants.default===void 0?void 0:_PlatformConstants.default.forceTouchAvailable)||false;","map":{"version":3,"sources":["ForceTouchGestureHandler.ts"],"names":["forceTouchGestureHandlerProps","ForceTouchFallback","React","Component","componentDidMount","console","warn","render","props","children","forceTouchHandlerName","ForceTouchGestureHandler","forceTouchAvailable","name","allowedProps","baseGestureHandlerProps","config"],"mappings":"4wCAAA,GAAA,OAAA,CAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA,CACA,GAAA,OAAA,CAAA,OAAA,YAAA,CACA,GAAA,mBAAA,CAAA,sBAAA,CAAA,OAAA,wBAAA,CAAA,CACA,GAAA,eAAA,CAAA,sBAAA,CAAA,OAAA,mBAAA,CAAA,CACA,GAAA,sBAAA,CAAA,OAAA,0BAAA,C,yQAKO,GAAMA,8BAA6B,CAAG,CAC3C,UAD2C,CAE3C,UAF2C,CAG3C,sBAH2C,CAAtC,C,uEAODC,mBAAN,6SAEEG,4BAAoB,CAClBC,OAAO,CAACC,IAARD,CACE,CAAA,CAAA,CAAA,MAAA,CAAA,UAAA,EACE,8NADF,CADFA,CAAAA,CAKD,CAAA,sBACDE,iBAAS,CACP,MAAO,KAAA,CAAKC,KAAL,CAAWC,QAAlB,CACD,CAAA,gCAX8BP,MAAAA,CAAAA,OAAAA,CAAMC,SAAvC,E,gBAAMF,kB,uBACyB,K,EAsDxB,GAAMS,sBAAqB,CAAG,0BAA9B,C,oDAGA,GAAMC,yBAAwB,CAAG,kBAAA,CAAA,OAAA,GAAA,IAAA,EAAA,kBAAA,CAAA,OAAA,GAAA,IAAA,EAAA,EAAA,kBAAA,CAAA,OAAA,CAAmBC,mBAAnB,CACpC,CAAA,CAAA,CAAA,cAAA,CAAA,OAAA,EAGE,CACAC,IAAI,CAAEH,qBADN,CAEAI,YAAY,8BACPC,qBAAAA,CAAAA,uBADS,EAETf,6BAFS,CAFd,CAMAgB,MAAM,CAAE,CAAA,CANR,CAHF,CADoC,CAYpCf,kBAZG,C,0DAcNU,wBAAD,CAAuDC,mBAAvD,CACE,CAAA,kBAAA,CAAA,OAAA,GAAA,IAAA,EAAA,kBAAA,CAAA,OAAA,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAA,kBAAA,CAAA,OAAA,CAAmBA,mBAAnB,GAA0C,KAD5C","sourcesContent":["import React, { PropsWithChildren } from 'react';\nimport { tagMessage } from '../utils';\nimport PlatformConstants from '../PlatformConstants';\nimport createHandler from './createHandler';\nimport {\n  BaseGestureHandlerProps,\n  baseGestureHandlerProps,\n} from './gestureHandlerCommon';\n\nexport const forceTouchGestureHandlerProps = [\n  'minForce',\n  'maxForce',\n  'feedbackOnActivation',\n] as const;\n\n// implicit `children` prop has been removed in @types/react^18.0.0\nclass ForceTouchFallback extends React.Component<PropsWithChildren<unknown>> {\n  static forceTouchAvailable = false;\n  componentDidMount() {\n    console.warn(\n      tagMessage(\n        'ForceTouchGestureHandler is not available on this platform. Please use ForceTouchGestureHandler.forceTouchAvailable to conditionally render other components that would provide a fallback behavior specific to your usecase'\n      )\n    );\n  }\n  render() {\n    return this.props.children;\n  }\n}\n\nexport type ForceTouchGestureHandlerEventPayload = {\n  x: number;\n  y: number;\n  absoluteX: number;\n  absoluteY: number;\n\n  /**\n   * The pressure of a touch.\n   */\n  force: number;\n};\n\nexport interface ForceTouchGestureConfig {\n  /**\n   *\n   * A minimal pressure that is required before handler can activate. Should be a\n   * value from range `[0.0, 1.0]`. Default is `0.2`.\n   */\n  minForce?: number;\n\n  /**\n   * A maximal pressure that could be applied for handler. If the pressure is\n   * greater, handler fails. Should be a value from range `[0.0, 1.0]`.\n   */\n  maxForce?: number;\n\n  /**\n   * Boolean value defining if haptic feedback has to be performed on\n   * activation.\n   */\n  feedbackOnActivation?: boolean;\n}\n\nexport interface ForceTouchGestureHandlerProps\n  extends BaseGestureHandlerProps<ForceTouchGestureHandlerEventPayload>,\n    ForceTouchGestureConfig {}\n\nexport type ForceTouchGestureHandler = typeof ForceTouchGestureHandler & {\n  forceTouchAvailable: boolean;\n};\n\nexport const forceTouchHandlerName = 'ForceTouchGestureHandler';\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare -- backward compatibility; see description on the top of gestureHandlerCommon.ts file\nexport const ForceTouchGestureHandler = PlatformConstants?.forceTouchAvailable\n  ? createHandler<\n      ForceTouchGestureHandlerProps,\n      ForceTouchGestureHandlerEventPayload\n    >({\n      name: forceTouchHandlerName,\n      allowedProps: [\n        ...baseGestureHandlerProps,\n        ...forceTouchGestureHandlerProps,\n      ] as const,\n      config: {},\n    })\n  : ForceTouchFallback;\n\n(ForceTouchGestureHandler as ForceTouchGestureHandler).forceTouchAvailable =\n  PlatformConstants?.forceTouchAvailable || false;\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";var _slicedToArray=require(\"@babel/runtime/helpers/slicedToArray\");var _objectWithoutProperties=require(\"@babel/runtime/helpers/objectWithoutProperties\");var _defineProperty2=require(\"@babel/runtime/helpers/defineProperty\");var _classCallCheck=require(\"@babel/runtime/helpers/classCallCheck\");var _createClass=require(\"@babel/runtime/helpers/createClass\");var _excluded=[\"enabled\"];function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty2(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _hammerjs=_interopRequireDefault(require(\"@egjs/hammerjs\"));var _reactNative=require(\"react-native-web/dist/index\");var _State=require(\"../State\");var _constants=require(\"./constants\");var NodeManager=_interopRequireWildcard(require(\"./NodeManager\"));function _getRequireWildcardCache(){if(typeof WeakMap!==\"function\")return null;var cache=new WeakMap();_getRequireWildcardCache=function _getRequireWildcardCache(){return cache;};return cache;}function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj;}if(obj===null||typeof obj!==\"object\"&&typeof obj!==\"function\"){return{default:obj};}var cache=_getRequireWildcardCache();if(cache&&cache.has(obj)){return cache.get(obj);}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc);}else{newObj[key]=obj[key];}}}newObj.default=obj;if(cache){cache.set(obj,newObj);}return newObj;}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}var gestureInstances=0;var GestureHandler=function(){function GestureHandler(){var _this=this;_classCallCheck(this,GestureHandler);_defineProperty(this,\"handlerTag\",void 0);_defineProperty(this,\"isGestureRunning\",false);_defineProperty(this,\"view\",null);_defineProperty(this,\"hasCustomActivationCriteria\",void 0);_defineProperty(this,\"hasGestureFailed\",false);_defineProperty(this,\"hammer\",null);_defineProperty(this,\"initialRotation\",null);_defineProperty(this,\"__initialX\",void 0);_defineProperty(this,\"__initialY\",void 0);_defineProperty(this,\"config\",{});_defineProperty(this,\"previousState\",_State.State.UNDETERMINED);_defineProperty(this,\"pendingGestures\",{});_defineProperty(this,\"oldState\",_State.State.UNDETERMINED);_defineProperty(this,\"lastSentState\",null);_defineProperty(this,\"gestureInstance\",void 0);_defineProperty(this,\"_stillWaiting\",void 0);_defineProperty(this,\"propsRef\",void 0);_defineProperty(this,\"ref\",void 0);_defineProperty(this,\"clearSelfAsPending\",function(){if(Array.isArray(_this.config.waitFor)){for(var gesture of _this.config.waitFor){gesture.removePendingGesture(_this.id);}}});_defineProperty(this,\"destroy\",function(){_this.clearSelfAsPending();if(_this.hammer){_this.hammer.stop(false);_this.hammer.destroy();}_this.hammer=null;});_defineProperty(this,\"isPointInView\",function(_ref){var x=_ref.x,y=_ref.y;var rect=_this.view.getBoundingClientRect();var pointerInside=x>=rect.left&&x<=rect.right&&y>=rect.top&&y<=rect.bottom;return pointerInside;});_defineProperty(this,\"sendEvent\",function(nativeEvent){var _this$propsRef$curren=_this.propsRef.current,onGestureHandlerEvent=_this$propsRef$curren.onGestureHandlerEvent,onGestureHandlerStateChange=_this$propsRef$curren.onGestureHandlerStateChange;var event=_this.transformEventData(nativeEvent);invokeNullableMethod(onGestureHandlerEvent,event);if(_this.lastSentState!==event.nativeEvent.state){_this.lastSentState=event.nativeEvent.state;invokeNullableMethod(onGestureHandlerStateChange,event);}});_defineProperty(this,\"sync\",function(){var gesture=_this.hammer.get(_this.name);if(!gesture)return;var enable=function enable(recognizer,inputData){if(!_this.config.enabled){_this.isGestureRunning=false;_this.hasGestureFailed=false;return false;}if(!inputData||!recognizer.options||typeof inputData.maxPointers==='undefined'){return _this.shouldEnableGestureOnSetup;}if(_this.hasGestureFailed){return false;}if(!_this.isDiscrete){if(_this.isGestureRunning){return true;}_this._stillWaiting=_this._getPendingGestures();if(_this._stillWaiting.length){for(var _gesture2 of _this._stillWaiting){if(!_gesture2.isDiscrete&&_gesture2.isGestureRunning){_this.hasGestureFailed=true;_this.isGestureRunning=false;return false;}}return false;}}if(!_this.hasCustomActivationCriteria){return true;}var deltaRotation=_this.initialRotation==null?0:inputData.rotation-_this.initialRotation;var _this$isGestureEnable=_this.isGestureEnabledForEvent(_this.getConfig(),recognizer,_objectSpread(_objectSpread({},inputData),{},{deltaRotation:deltaRotation})),success=_this$isGestureEnable.success,failed=_this$isGestureEnable.failed;if(failed){_this.simulateCancelEvent(inputData);_this.hasGestureFailed=true;}return success;};var params=_this.getHammerConfig();gesture.set(_objectSpread(_objectSpread({},params),{},{enable:enable}));});this.gestureInstance=gestureInstances++;this.hasCustomActivationCriteria=false;}_createClass(GestureHandler,[{key:\"id\",get:function get(){return\"\"+this.name+this.gestureInstance;}},{key:\"isDiscrete\",get:function get(){return false;}},{key:\"shouldEnableGestureOnSetup\",get:function get(){throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');}},{key:\"getConfig\",value:function getConfig(){return this.config;}},{key:\"onWaitingEnded\",value:function onWaitingEnded(_gesture){}},{key:\"removePendingGesture\",value:function removePendingGesture(id){delete this.pendingGestures[id];}},{key:\"addPendingGesture\",value:function addPendingGesture(gesture){this.pendingGestures[gesture.id]=gesture;}},{key:\"isGestureEnabledForEvent\",value:function isGestureEnabledForEvent(_config,_recognizer,_event){return{success:true};}},{key:\"NativeGestureClass\",get:function get(){throw new Error('Must override GestureHandler.NativeGestureClass');}},{key:\"updateHasCustomActivationCriteria\",value:function updateHasCustomActivationCriteria(_config){return true;}},{key:\"updateGestureConfig\",value:function updateGestureConfig(_ref2){var _ref2$enabled=_ref2.enabled,enabled=_ref2$enabled===void 0?true:_ref2$enabled,props=_objectWithoutProperties(_ref2,_excluded);this.clearSelfAsPending();this.config=ensureConfig(_objectSpread({enabled:enabled},props));this.hasCustomActivationCriteria=this.updateHasCustomActivationCriteria(this.config);if(Array.isArray(this.config.waitFor)){for(var gesture of this.config.waitFor){gesture.addPendingGesture(this);}}if(this.hammer){this.sync();}return this.config;}},{key:\"getState\",value:function getState(type){if(type==0){return 0;}return _constants.EventMap[type];}},{key:\"transformEventData\",value:function transformEventData(event){var eventType=event.eventType,numberOfPointers=event.maxPointers;var changedTouch=event.changedPointers[0];var pointerInside=this.isPointInView({x:changedTouch.clientX,y:changedTouch.clientY});var state=this.getState(eventType);if(state!==this.previousState){this.oldState=this.previousState;this.previousState=state;}return{nativeEvent:_objectSpread(_objectSpread({numberOfPointers:numberOfPointers,state:state,pointerInside:pointerInside},this.transformNativeEvent(event)),{},{handlerTag:this.handlerTag,target:this.ref,oldState:state!==this.previousState||state!=4?this.oldState:undefined}),timeStamp:Date.now()};}},{key:\"transformNativeEvent\",value:function transformNativeEvent(_event){return{};}},{key:\"cancelPendingGestures\",value:function cancelPendingGestures(event){for(var gesture of Object.values(this.pendingGestures)){if(gesture&&gesture.isGestureRunning){gesture.hasGestureFailed=true;gesture.cancelEvent(event);}}}},{key:\"notifyPendingGestures\",value:function notifyPendingGestures(){for(var gesture of Object.values(this.pendingGestures)){if(gesture){gesture.onWaitingEnded(this);}}}},{key:\"onGestureEnded\",value:function onGestureEnded(event){this.isGestureRunning=false;this.cancelPendingGestures(event);}},{key:\"forceInvalidate\",value:function forceInvalidate(event){if(this.isGestureRunning){this.hasGestureFailed=true;this.cancelEvent(event);}}},{key:\"cancelEvent\",value:function cancelEvent(event){this.notifyPendingGestures();this.sendEvent(_objectSpread(_objectSpread({},event),{},{eventType:_hammerjs.default.INPUT_CANCEL,isFinal:true}));this.onGestureEnded(event);}},{key:\"onRawEvent\",value:function onRawEvent(_ref3){var isFirst=_ref3.isFirst;if(isFirst){this.hasGestureFailed=false;}}},{key:\"setView\",value:function setView(ref,propsRef){var _this2=this;if(ref==null){this.destroy();this.view=null;return;}this.propsRef=propsRef;this.ref=ref;this.view=(0,_reactNative.findNodeHandle)(ref);this.hammer=new _hammerjs.default.Manager(this.view);this.oldState=_State.State.UNDETERMINED;this.previousState=_State.State.UNDETERMINED;this.lastSentState=null;var NativeGestureClass=this.NativeGestureClass;var gesture=new NativeGestureClass(this.getHammerConfig());this.hammer.add(gesture);this.hammer.on('hammer.input',function(ev){if(!_this2.config.enabled){_this2.hasGestureFailed=false;_this2.isGestureRunning=false;return;}_this2.onRawEvent(ev);if(_this2.initialRotation===null&&ev.rotation!==0){_this2.initialRotation=ev.rotation;}if(ev.isFinal){setTimeout(function(){_this2.initialRotation=null;_this2.hasGestureFailed=false;});}});this.setupEvents();this.sync();}},{key:\"setupEvents\",value:function setupEvents(){var _this3=this;if(!this.isDiscrete){this.hammer.on(this.name+\"start\",function(event){return _this3.onStart(event);});this.hammer.on(this.name+\"end \"+this.name+\"cancel\",function(event){_this3.onGestureEnded(event);});}this.hammer.on(this.name,function(ev){return _this3.onGestureActivated(ev);});}},{key:\"onStart\",value:function onStart(_ref4){var deltaX=_ref4.deltaX,deltaY=_ref4.deltaY,rotation=_ref4.rotation;this.oldState=_State.State.UNDETERMINED;this.previousState=_State.State.UNDETERMINED;this.lastSentState=null;this.isGestureRunning=true;this.__initialX=deltaX;this.__initialY=deltaY;this.initialRotation=rotation;}},{key:\"onGestureActivated\",value:function onGestureActivated(ev){this.sendEvent(ev);}},{key:\"onSuccess\",value:function onSuccess(){}},{key:\"_getPendingGestures\",value:function _getPendingGestures(){if(Array.isArray(this.config.waitFor)&&this.config.waitFor.length){var stillWaiting=this.config.waitFor.filter(function(_ref5){var hasGestureFailed=_ref5.hasGestureFailed;return hasGestureFailed===false;});return stillWaiting;}return[];}},{key:\"getHammerConfig\",value:function getHammerConfig(){var pointers=this.config.minPointers===this.config.maxPointers?this.config.minPointers:0;return{pointers:pointers};}},{key:\"simulateCancelEvent\",value:function simulateCancelEvent(_inputData){}}]);return GestureHandler;}();function invokeNullableMethod(method,event){if(method){if(typeof method==='function'){method(event);}else{if('__getHandler'in method&&typeof method.__getHandler==='function'){var handler=method.__getHandler();invokeNullableMethod(handler,event);}else{if('__nodeConfig'in method){var argMapping=method.__nodeConfig.argMapping;if(Array.isArray(argMapping)){for(var _ref6 of argMapping.entries()){var _ref7=_slicedToArray(_ref6,2);var index=_ref7[0];var _ref7$=_slicedToArray(_ref7[1],2);var key=_ref7$[0];var value=_ref7$[1];if(key in event.nativeEvent){var nativeValue=event.nativeEvent[key];if(value&&value.setValue){value.setValue(nativeValue);}else{method.__nodeConfig.argMapping[index]=[key,nativeValue];}}}}}}}}}function ensureConfig(config){var props=_objectSpread({},config);if('minDist'in config){props.minDist=config.minDist;props.minDistSq=props.minDist*props.minDist;}if('minVelocity'in config){props.minVelocity=config.minVelocity;props.minVelocitySq=props.minVelocity*props.minVelocity;}if('maxDist'in config){props.maxDist=config.maxDist;props.maxDistSq=config.maxDist*config.maxDist;}if('waitFor'in config){props.waitFor=asArray(config.waitFor).map(function(_ref8){var handlerTag=_ref8.handlerTag;return NodeManager.getHandler(handlerTag);}).filter(function(v){return v;});}else{props.waitFor=null;}var configProps=['minPointers','maxPointers','minDist','maxDist','maxDistSq','minVelocitySq','minDistSq','minVelocity','failOffsetXStart','failOffsetYStart','failOffsetXEnd','failOffsetYEnd','activeOffsetXStart','activeOffsetXEnd','activeOffsetYStart','activeOffsetYEnd'];configProps.forEach(function(prop){if(typeof props[prop]==='undefined'){props[prop]=Number.NaN;}});return props;}function asArray(value){return value==null?[]:Array.isArray(value)?value:[value];}var _default=GestureHandler;exports.default=_default;","map":{"version":3,"sources":["GestureHandler.ts"],"names":["gestureInstances","GestureHandler","State","UNDETERMINED","id","name","gestureInstance","isDiscrete","shouldEnableGestureOnSetup","Error","constructor","hasCustomActivationCriteria","getConfig","config","onWaitingEnded","_gesture","removePendingGesture","pendingGestures","addPendingGesture","gesture","isGestureEnabledForEvent","_config","_recognizer","_event","success","NativeGestureClass","updateHasCustomActivationCriteria","Array","isArray","waitFor","updateGestureConfig","enabled","props","clearSelfAsPending","ensureConfig","hammer","sync","stop","destroy","x","y","rect","view","getBoundingClientRect","pointerInside","left","right","top","bottom","getState","type","EventMap","transformEventData","event","eventType","maxPointers","numberOfPointers","changedTouch","changedPointers","isPointInView","clientX","clientY","state","previousState","oldState","nativeEvent","transformNativeEvent","handlerTag","target","ref","undefined","timeStamp","Date","now","onGestureHandlerEvent","onGestureHandlerStateChange","propsRef","current","invokeNullableMethod","lastSentState","cancelPendingGestures","Object","values","isGestureRunning","hasGestureFailed","cancelEvent","notifyPendingGestures","onGestureEnded","forceInvalidate","sendEvent","Hammer","INPUT_CANCEL","isFinal","onRawEvent","isFirst","setView","Manager","getHammerConfig","add","on","ev","initialRotation","rotation","setTimeout","setupEvents","onStart","onGestureActivated","deltaX","deltaY","__initialX","__initialY","onSuccess","_getPendingGestures","length","stillWaiting","filter","pointers","minPointers","get","enable","recognizer","inputData","options","_stillWaiting","deltaRotation","failed","simulateCancelEvent","params","set","_inputData","method","__getHandler","handler","argMapping","__nodeConfig","index","key","value","entries","nativeValue","setValue","minDist","minDistSq","minVelocity","minVelocitySq","maxDist","maxDistSq","asArray","map","NodeManager","getHandler","v","configProps","forEach","prop","Number","NaN"],"mappings":"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","sourcesContent":["/* eslint-disable eslint-comments/no-unlimited-disable */\n/* eslint-disable */\nimport Hammer from '@egjs/hammerjs';\nimport { findNodeHandle } from 'react-native';\n\nimport { State } from '../State';\nimport { EventMap } from './constants';\nimport * as NodeManager from './NodeManager';\n\n// TODO(TS) Replace with HammerInput if https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438/files is merged\nexport type HammerInputExt = Omit<HammerInput, 'destroy' | 'handler' | 'init'>;\n\nexport type Config = Partial<{\n  enabled: boolean;\n  minPointers: number;\n  maxPointers: number;\n  minDist: number;\n  minDistSq: number;\n  minVelocity: number;\n  minVelocitySq: number;\n  maxDist: number;\n  maxDistSq: number;\n  failOffsetXStart: number;\n  failOffsetYStart: number;\n  failOffsetXEnd: number;\n  failOffsetYEnd: number;\n  activeOffsetXStart: number;\n  activeOffsetXEnd: number;\n  activeOffsetYStart: number;\n  activeOffsetYEnd: number;\n  waitFor: any[] | null;\n}>;\n\ntype NativeEvent = ReturnType<GestureHandler['transformEventData']>;\n\nlet gestureInstances = 0;\n\nabstract class GestureHandler {\n  public handlerTag: any;\n  public isGestureRunning = false;\n  public view: number | null = null;\n  protected hasCustomActivationCriteria: boolean;\n  protected hasGestureFailed = false;\n  protected hammer: HammerManager | null = null;\n  protected initialRotation: number | null = null;\n  protected __initialX: any;\n  protected __initialY: any;\n  protected config: Config = {};\n  protected previousState: State = State.UNDETERMINED;\n  private pendingGestures: Record<string, this> = {};\n  private oldState: State = State.UNDETERMINED;\n  private lastSentState: State | null = null;\n  private gestureInstance: number;\n  private _stillWaiting: any;\n  private propsRef: any;\n  private ref: any;\n\n  abstract get name(): string;\n\n  get id() {\n    return `${this.name}${this.gestureInstance}`;\n  }\n\n  get isDiscrete() {\n    return false;\n  }\n\n  get shouldEnableGestureOnSetup(): boolean {\n    throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\n  }\n\n  constructor() {\n    this.gestureInstance = gestureInstances++;\n    this.hasCustomActivationCriteria = false;\n  }\n\n  getConfig() {\n    return this.config;\n  }\n\n  onWaitingEnded(_gesture: this) {}\n\n  removePendingGesture(id: string) {\n    delete this.pendingGestures[id];\n  }\n\n  addPendingGesture(gesture: this) {\n    this.pendingGestures[gesture.id] = gesture;\n  }\n\n  isGestureEnabledForEvent(\n    _config: any,\n    _recognizer: any,\n    _event: any\n  ): { failed?: boolean; success?: boolean } {\n    return { success: true };\n  }\n\n  get NativeGestureClass(): RecognizerStatic {\n    throw new Error('Must override GestureHandler.NativeGestureClass');\n  }\n\n  updateHasCustomActivationCriteria(_config: Config) {\n    return true;\n  }\n\n  clearSelfAsPending = () => {\n    if (Array.isArray(this.config.waitFor)) {\n      for (const gesture of this.config.waitFor) {\n        gesture.removePendingGesture(this.id);\n      }\n    }\n  };\n\n  updateGestureConfig({ enabled = true, ...props }) {\n    this.clearSelfAsPending();\n\n    this.config = ensureConfig({ enabled, ...props });\n    this.hasCustomActivationCriteria = this.updateHasCustomActivationCriteria(\n      this.config\n    );\n    if (Array.isArray(this.config.waitFor)) {\n      for (const gesture of this.config.waitFor) {\n        gesture.addPendingGesture(this);\n      }\n    }\n\n    if (this.hammer) {\n      this.sync();\n    }\n    return this.config;\n  }\n\n  destroy = () => {\n    this.clearSelfAsPending();\n\n    if (this.hammer) {\n      this.hammer.stop(false);\n      this.hammer.destroy();\n    }\n    this.hammer = null;\n  };\n\n  isPointInView = ({ x, y }: { x: number; y: number }) => {\n    // @ts-ignore FIXME(TS)\n    const rect = this.view!.getBoundingClientRect();\n    const pointerInside =\n      x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n    return pointerInside;\n  };\n\n  getState(type: keyof typeof EventMap): State {\n    // @ts-ignore TODO(TS) check if this is needed\n    if (type == 0) {\n      return 0;\n    }\n    return EventMap[type];\n  }\n\n  transformEventData(event: HammerInputExt) {\n    const { eventType, maxPointers: numberOfPointers } = event;\n    // const direction = DirectionMap[ev.direction];\n    const changedTouch = event.changedPointers[0];\n    const pointerInside = this.isPointInView({\n      x: changedTouch.clientX,\n      y: changedTouch.clientY,\n    });\n\n    // TODO(TS) Remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50966 is merged.\n    const state = this.getState(eventType as 1 | 2 | 4 | 8);\n    if (state !== this.previousState) {\n      this.oldState = this.previousState;\n      this.previousState = state;\n    }\n\n    return {\n      nativeEvent: {\n        numberOfPointers,\n        state,\n        pointerInside,\n        ...this.transformNativeEvent(event),\n        // onHandlerStateChange only\n        handlerTag: this.handlerTag,\n        target: this.ref,\n        // send oldState only when the state was changed, or is different than ACTIVE\n        // GestureDetector relies on the presence of `oldState` to differentiate between\n        // update events and state change events\n        oldState:\n          state !== this.previousState || state != 4\n            ? this.oldState\n            : undefined,\n      },\n      timeStamp: Date.now(),\n    };\n  }\n\n  transformNativeEvent(_event: HammerInputExt) {\n    return {};\n  }\n\n  sendEvent = (nativeEvent: HammerInputExt) => {\n    const {\n      onGestureHandlerEvent,\n      onGestureHandlerStateChange,\n    } = this.propsRef.current;\n\n    const event = this.transformEventData(nativeEvent);\n\n    invokeNullableMethod(onGestureHandlerEvent, event);\n    if (this.lastSentState !== event.nativeEvent.state) {\n      this.lastSentState = event.nativeEvent.state as State;\n      invokeNullableMethod(onGestureHandlerStateChange, event);\n    }\n  };\n\n  cancelPendingGestures(event: HammerInputExt) {\n    for (const gesture of Object.values(this.pendingGestures)) {\n      if (gesture && gesture.isGestureRunning) {\n        gesture.hasGestureFailed = true;\n        gesture.cancelEvent(event);\n      }\n    }\n  }\n\n  notifyPendingGestures() {\n    for (const gesture of Object.values(this.pendingGestures)) {\n      if (gesture) {\n        gesture.onWaitingEnded(this);\n      }\n    }\n  }\n\n  // FIXME event is undefined in runtime when firstly invoked (see Draggable example), check other functions taking event as input\n  onGestureEnded(event: HammerInputExt) {\n    this.isGestureRunning = false;\n    this.cancelPendingGestures(event);\n  }\n\n  forceInvalidate(event: HammerInputExt) {\n    if (this.isGestureRunning) {\n      this.hasGestureFailed = true;\n      this.cancelEvent(event);\n    }\n  }\n\n  cancelEvent(event: HammerInputExt) {\n    this.notifyPendingGestures();\n    this.sendEvent({\n      ...event,\n      eventType: Hammer.INPUT_CANCEL,\n      isFinal: true,\n    });\n    this.onGestureEnded(event);\n  }\n\n  onRawEvent({ isFirst }: HammerInputExt) {\n    if (isFirst) {\n      this.hasGestureFailed = false;\n    }\n  }\n\n  setView(ref: Parameters<typeof findNodeHandle>['0'], propsRef: any) {\n    if (ref == null) {\n      this.destroy();\n      this.view = null;\n      return;\n    }\n\n    this.propsRef = propsRef;\n    this.ref = ref;\n\n    this.view = findNodeHandle(ref);\n    this.hammer = new Hammer.Manager(this.view as any);\n\n    this.oldState = State.UNDETERMINED;\n    this.previousState = State.UNDETERMINED;\n    this.lastSentState = null;\n\n    const { NativeGestureClass } = this;\n    // @ts-ignore TODO(TS)\n    const gesture = new NativeGestureClass(this.getHammerConfig());\n    this.hammer.add(gesture);\n\n    this.hammer.on('hammer.input', (ev: HammerInput) => {\n      if (!this.config.enabled) {\n        this.hasGestureFailed = false;\n        this.isGestureRunning = false;\n        return;\n      }\n\n      this.onRawEvent((ev as unknown) as HammerInputExt);\n\n      // TODO: Bacon: Check against something other than null\n      // The isFirst value is not called when the first rotation is calculated.\n      if (this.initialRotation === null && ev.rotation !== 0) {\n        this.initialRotation = ev.rotation;\n      }\n      if (ev.isFinal) {\n        // in favor of a willFail otherwise the last frame of the gesture will be captured.\n        setTimeout(() => {\n          this.initialRotation = null;\n          this.hasGestureFailed = false;\n        });\n      }\n    });\n\n    this.setupEvents();\n    this.sync();\n  }\n\n  setupEvents() {\n    // TODO(TS) Hammer types aren't exactly that what we get in runtime\n    if (!this.isDiscrete) {\n      this.hammer!.on(`${this.name}start`, (event: HammerInput) =>\n        this.onStart((event as unknown) as HammerInputExt)\n      );\n      this.hammer!.on(\n        `${this.name}end ${this.name}cancel`,\n        (event: HammerInput) => {\n          this.onGestureEnded((event as unknown) as HammerInputExt);\n        }\n      );\n    }\n    this.hammer!.on(this.name, (ev: HammerInput) =>\n      this.onGestureActivated((ev as unknown) as HammerInputExt)\n    ); // TODO(TS) remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438 is merged\n  }\n\n  onStart({ deltaX, deltaY, rotation }: HammerInputExt) {\n    // Reset the state for the next gesture\n    this.oldState = State.UNDETERMINED;\n    this.previousState = State.UNDETERMINED;\n    this.lastSentState = null;\n\n    this.isGestureRunning = true;\n    this.__initialX = deltaX;\n    this.__initialY = deltaY;\n    this.initialRotation = rotation;\n  }\n\n  onGestureActivated(ev: HammerInputExt) {\n    this.sendEvent(ev);\n  }\n\n  onSuccess() {}\n\n  _getPendingGestures() {\n    if (Array.isArray(this.config.waitFor) && this.config.waitFor.length) {\n      // Get the list of gestures that this gesture is still waiting for.\n      // Use `=== false` in case a ref that isn't a gesture handler is used.\n      const stillWaiting = this.config.waitFor.filter(\n        ({ hasGestureFailed }) => hasGestureFailed === false\n      );\n      return stillWaiting;\n    }\n    return [];\n  }\n\n  getHammerConfig() {\n    const pointers =\n      this.config.minPointers === this.config.maxPointers\n        ? this.config.minPointers\n        : 0;\n    return {\n      pointers,\n    };\n  }\n\n  sync = () => {\n    const gesture = this.hammer!.get(this.name);\n    if (!gesture) return;\n\n    const enable = (recognizer: any, inputData: any) => {\n      if (!this.config.enabled) {\n        this.isGestureRunning = false;\n        this.hasGestureFailed = false;\n        return false;\n      }\n\n      // Prevent events before the system is ready.\n      if (\n        !inputData ||\n        !recognizer.options ||\n        typeof inputData.maxPointers === 'undefined'\n      ) {\n        return this.shouldEnableGestureOnSetup;\n      }\n\n      if (this.hasGestureFailed) {\n        return false;\n      }\n\n      if (!this.isDiscrete) {\n        if (this.isGestureRunning) {\n          return true;\n        }\n        // The built-in hammer.js \"waitFor\" doesn't work across multiple views.\n        // Only process if there are views to wait for.\n        this._stillWaiting = this._getPendingGestures();\n        // This gesture should continue waiting.\n        if (this._stillWaiting.length) {\n          // Check to see if one of the gestures you're waiting for has started.\n          // If it has then the gesture should fail.\n          for (const gesture of this._stillWaiting) {\n            // When the target gesture has started, this gesture must force fail.\n            if (!gesture.isDiscrete && gesture.isGestureRunning) {\n              this.hasGestureFailed = true;\n              this.isGestureRunning = false;\n              return false;\n            }\n          }\n          // This gesture shouldn't start until the others have finished.\n          return false;\n        }\n      }\n\n      // Use default behaviour\n      if (!this.hasCustomActivationCriteria) {\n        return true;\n      }\n\n      const deltaRotation =\n        this.initialRotation == null\n          ? 0\n          : inputData.rotation - this.initialRotation;\n      // @ts-ignore FIXME(TS)\n      const { success, failed } = this.isGestureEnabledForEvent(\n        this.getConfig(),\n        recognizer,\n        {\n          ...inputData,\n          deltaRotation,\n        }\n      );\n\n      if (failed) {\n        this.simulateCancelEvent(inputData);\n        this.hasGestureFailed = true;\n      }\n      return success;\n    };\n\n    const params = this.getHammerConfig();\n    // @ts-ignore FIXME(TS)\n    gesture.set({ ...params, enable });\n  };\n\n  simulateCancelEvent(_inputData: any) {}\n}\n\n// TODO(TS) investigate this method\n// Used for sending data to a callback or AnimatedEvent\nfunction invokeNullableMethod(\n  method:\n    | ((event: NativeEvent) => void)\n    | { __getHandler: () => (event: NativeEvent) => void }\n    | { __nodeConfig: { argMapping: any } },\n  event: NativeEvent\n) {\n  if (method) {\n    if (typeof method === 'function') {\n      method(event);\n    } else {\n      // For use with reanimated's AnimatedEvent\n      if (\n        '__getHandler' in method &&\n        typeof method.__getHandler === 'function'\n      ) {\n        const handler = method.__getHandler();\n        invokeNullableMethod(handler, event);\n      } else {\n        if ('__nodeConfig' in method) {\n          const { argMapping } = method.__nodeConfig;\n          if (Array.isArray(argMapping)) {\n            for (const [index, [key, value]] of argMapping.entries()) {\n              if (key in event.nativeEvent) {\n                // @ts-ignore fix method type\n                const nativeValue = event.nativeEvent[key];\n                if (value && value.setValue) {\n                  // Reanimated API\n                  value.setValue(nativeValue);\n                } else {\n                  // RN Animated API\n                  method.__nodeConfig.argMapping[index] = [key, nativeValue];\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n// Validate the props\nfunction ensureConfig(config: Config): Required<Config> {\n  const props = { ...config };\n\n  // TODO(TS) We use ! to assert that if property is present then value is not empty (null, undefined)\n  if ('minDist' in config) {\n    props.minDist = config.minDist;\n    props.minDistSq = props.minDist! * props.minDist!;\n  }\n  if ('minVelocity' in config) {\n    props.minVelocity = config.minVelocity;\n    props.minVelocitySq = props.minVelocity! * props.minVelocity!;\n  }\n  if ('maxDist' in config) {\n    props.maxDist = config.maxDist;\n    props.maxDistSq = config.maxDist! * config.maxDist!;\n  }\n  if ('waitFor' in config) {\n    props.waitFor = asArray(config.waitFor)\n      .map(({ handlerTag }: { handlerTag: number }) =>\n        NodeManager.getHandler(handlerTag)\n      )\n      .filter((v) => v);\n  } else {\n    props.waitFor = null;\n  }\n\n  const configProps = [\n    'minPointers',\n    'maxPointers',\n    'minDist',\n    'maxDist',\n    'maxDistSq',\n    'minVelocitySq',\n    'minDistSq',\n    'minVelocity',\n    'failOffsetXStart',\n    'failOffsetYStart',\n    'failOffsetXEnd',\n    'failOffsetYEnd',\n    'activeOffsetXStart',\n    'activeOffsetXEnd',\n    'activeOffsetYStart',\n    'activeOffsetYEnd',\n  ] as const;\n  configProps.forEach((prop: typeof configProps[number]) => {\n    if (typeof props[prop] === 'undefined') {\n      props[prop] = Number.NaN;\n    }\n  });\n  return props as Required<Config>; // TODO(TS) how to convince TS that props are filled?\n}\n\nfunction asArray<T>(value: T | T[]) {\n  // TODO(TS) use config.waitFor type\n  return value == null ? [] : Array.isArray(value) ? value : [value];\n}\n\nexport default GestureHandler;\n"]},"metadata":{},"sourceType":"script"}
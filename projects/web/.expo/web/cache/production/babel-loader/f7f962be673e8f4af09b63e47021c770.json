{"ast":null,"code":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.GestureStateManager=void 0;var _reanimatedWrapper=require(\"./reanimatedWrapper\");var _State=require(\"../../State\");var _utils=require(\"../../utils\");var warningMessage=(0,_utils.tagMessage)('react-native-reanimated is required in order to use synchronous state management');var REANIMATED_AVAILABLE=(_reanimatedWrapper.Reanimated===null||_reanimatedWrapper.Reanimated===void 0?void 0:_reanimatedWrapper.Reanimated.useSharedValue)!==undefined;var setGestureState=_reanimatedWrapper.Reanimated===null||_reanimatedWrapper.Reanimated===void 0?void 0:_reanimatedWrapper.Reanimated.setGestureState;var GestureStateManager={create:function create(handlerTag){'worklet';return{begin:function begin(){'worklet';if(REANIMATED_AVAILABLE){setGestureState(handlerTag,_State.State.BEGAN);}else{console.warn(warningMessage);}},activate:function activate(){'worklet';if(REANIMATED_AVAILABLE){setGestureState(handlerTag,_State.State.ACTIVE);}else{console.warn(warningMessage);}},fail:function fail(){'worklet';if(REANIMATED_AVAILABLE){setGestureState(handlerTag,_State.State.FAILED);}else{console.warn(warningMessage);}},end:function end(){'worklet';if(REANIMATED_AVAILABLE){setGestureState(handlerTag,_State.State.END);}else{console.warn(warningMessage);}}};}};exports.GestureStateManager=GestureStateManager;","map":{"version":3,"sources":["gestureStateManager.ts"],"names":["warningMessage","REANIMATED_AVAILABLE","useSharedValue","undefined","setGestureState","Reanimated","GestureStateManager","create","handlerTag","begin","State","BEGAN","console","warn","activate","ACTIVE","fail","FAILED","end","END"],"mappings":"yGAAA,GAAA,mBAAA,CAAA,OAAA,uBAAA,CACA,GAAA,OAAA,CAAA,OAAA,eAAA,CACA,GAAA,OAAA,CAAA,OAAA,eAAA,CASA,GAAMA,eAAc,CAAG,CAAA,CAAA,CAAA,MAAA,CAAA,UAAA,EACrB,kFADqB,CAAvB,CAMA,GAAMC,qBAAoB,CAAG,CAAA,kBAAA,CAAA,UAAA,GAAA,IAAA,EAAA,kBAAA,CAAA,UAAA,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAA,kBAAA,CAAA,UAAA,CAAYC,cAAZ,IAA+BC,SAA5D,CACA,GAAMC,gBAAe,CAAGC,kBAAAA,CAAAA,UAAH,GAAA,IAAA,EAAGA,kBAAAA,CAAAA,UAAH,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAGA,kBAAAA,CAAAA,UAAAA,CAAYD,eAApC,CAEO,GAAME,oBAAmB,CAAG,CACjCC,MAAM,iBAACC,UAAD,CAA8C,CAClD,SAAA,CACA,MAAO,CACLC,KAAK,CAAE,gBAAM,CACX,SAAA,CACA,GAAIR,oBAAJ,CAA0B,CACxBG,eAAe,CAACI,UAAD,CAAaE,MAAAA,CAAAA,KAAAA,CAAMC,KAAnB,CAAfP,CACD,CAFD,IAEO,CACLQ,OAAO,CAACC,IAARD,CAAaZ,cAAbY,CAAAA,CACD,CACF,CARI,CAULE,QAAQ,CAAE,mBAAM,CACd,SAAA,CACA,GAAIb,oBAAJ,CAA0B,CACxBG,eAAe,CAACI,UAAD,CAAaE,MAAAA,CAAAA,KAAAA,CAAMK,MAAnB,CAAfX,CACD,CAFD,IAEO,CACLQ,OAAO,CAACC,IAARD,CAAaZ,cAAbY,CAAAA,CACD,CACF,CAjBI,CAmBLI,IAAI,CAAE,eAAM,CACV,SAAA,CACA,GAAIf,oBAAJ,CAA0B,CACxBG,eAAe,CAACI,UAAD,CAAaE,MAAAA,CAAAA,KAAAA,CAAMO,MAAnB,CAAfb,CACD,CAFD,IAEO,CACLQ,OAAO,CAACC,IAARD,CAAaZ,cAAbY,CAAAA,CACD,CACF,CA1BI,CA4BLM,GAAG,CAAE,cAAM,CACT,SAAA,CACA,GAAIjB,oBAAJ,CAA0B,CACxBG,eAAe,CAACI,UAAD,CAAaE,MAAAA,CAAAA,KAAAA,CAAMS,GAAnB,CAAff,CACD,CAFD,IAEO,CACLQ,OAAO,CAACC,IAARD,CAAaZ,cAAbY,CAAAA,CACD,CACF,CAnCI,CAAP,CAqCD,CAxCgC,CAA5B,C","sourcesContent":["import { Reanimated } from './reanimatedWrapper';\nimport { State } from '../../State';\nimport { tagMessage } from '../../utils';\n\nexport interface GestureStateManagerType {\n  begin: () => void;\n  activate: () => void;\n  fail: () => void;\n  end: () => void;\n}\n\nconst warningMessage = tagMessage(\n  'react-native-reanimated is required in order to use synchronous state management'\n);\n\n// check if reanimated module is available, but look for useSharedValue as conditional\n// require of reanimated can sometimes return content of `utils.ts` file (?)\nconst REANIMATED_AVAILABLE = Reanimated?.useSharedValue !== undefined;\nconst setGestureState = Reanimated?.setGestureState;\n\nexport const GestureStateManager = {\n  create(handlerTag: number): GestureStateManagerType {\n    'worklet';\n    return {\n      begin: () => {\n        'worklet';\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, State.BEGAN);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n\n      activate: () => {\n        'worklet';\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, State.ACTIVE);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n\n      fail: () => {\n        'worklet';\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, State.FAILED);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n\n      end: () => {\n        'worklet';\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, State.END);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n    };\n  },\n};\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";var _classCallCheck=require(\"@babel/runtime/helpers/classCallCheck\");var _createClass=require(\"@babel/runtime/helpers/createClass\");var _get=require(\"@babel/runtime/helpers/get\");var _inherits=require(\"@babel/runtime/helpers/inherits\");var _possibleConstructorReturn=require(\"@babel/runtime/helpers/possibleConstructorReturn\");var _getPrototypeOf=require(\"@babel/runtime/helpers/getPrototypeOf\");function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _DiscreteGestureHandler=_interopRequireDefault(require(\"./DiscreteGestureHandler\"));var NodeManager=_interopRequireWildcard(require(\"./NodeManager\"));var _PressGestureHandler=_interopRequireDefault(require(\"./PressGestureHandler\"));var _utils=require(\"./utils\");function _getRequireWildcardCache(){if(typeof WeakMap!==\"function\")return null;var cache=new WeakMap();_getRequireWildcardCache=function _getRequireWildcardCache(){return cache;};return cache;}function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj;}if(obj===null||typeof obj!==\"object\"&&typeof obj!==\"function\"){return{default:obj};}var cache=_getRequireWildcardCache();if(cache&&cache.has(obj)){return cache.get(obj);}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc);}else{newObj[key]=obj[key];}}}newObj.default=obj;if(cache){cache.set(obj,newObj);}return newObj;}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var NativeViewGestureHandler=function(_PressGestureHandler$){_inherits(NativeViewGestureHandler,_PressGestureHandler$);var _super=_createSuper(NativeViewGestureHandler);function NativeViewGestureHandler(){_classCallCheck(this,NativeViewGestureHandler);return _super.apply(this,arguments);}_createClass(NativeViewGestureHandler,[{key:\"onRawEvent\",value:function onRawEvent(ev){var _this=this;_get(_getPrototypeOf(NativeViewGestureHandler.prototype),\"onRawEvent\",this).call(this,ev);if(!ev.isFinal){if((0,_utils.TEST_MIN_IF_NOT_NAN)((0,_utils.VEC_LEN_SQ)({x:ev.deltaX,y:ev.deltaY}),10)){if(this.config.disallowInterruption){var gestures=Object.values(NodeManager.getNodes()).filter(function(gesture){var handlerTag=gesture.handlerTag,view=gesture.view,isGestureRunning=gesture.isGestureRunning;return handlerTag!==_this.handlerTag&&isGestureRunning&&gesture instanceof _DiscreteGestureHandler.default&&view&&_this.view.contains(view);});for(var gesture of gestures){gesture.forceInvalidate(ev);}}}}}}]);return NativeViewGestureHandler;}(_PressGestureHandler.default);var _default=NativeViewGestureHandler;exports.default=_default;","map":{"version":3,"sources":["NativeViewGestureHandler.ts"],"names":["NativeViewGestureHandler","PressGestureHandler","onRawEvent","ev","isFinal","x","deltaX","y","deltaY","config","disallowInterruption","gestures","values","NodeManager","getNodes","filter","gesture","handlerTag","view","isGestureRunning","DiscreteGestureHandler","contains","forceInvalidate"],"mappings":"2pCAAA,GAAA,wBAAA,CAAA,sBAAA,CAAA,OAAA,4BAAA,CAAA,CAEA,GAAA,YAAA,CAAA,uBAAA,CAAA,OAAA,iBAAA,CAAA,CACA,GAAA,qBAAA,CAAA,sBAAA,CAAA,OAAA,yBAAA,CAAA,CACA,GAAA,OAAA,CAAA,OAAA,WAAA,C,o6BAEMA,yBAAN,oUACEE,oBAAWC,EAAD,CAAqB,gBAC7B,sFAAiBA,EAAjB,EACA,GAAI,CAACA,EAAE,CAACC,OAAR,CAAiB,CAEf,GAAI,CAAA,CAAA,CAAA,MAAA,CAAA,mBAAA,EAAoB,CAAA,CAAA,CAAA,MAAA,CAAA,UAAA,EAAW,CAAEC,CAAC,CAAEF,EAAE,CAACG,MAAR,CAAgBC,CAAC,CAAEJ,EAAE,CAACK,MAAtB,CAAX,CAApB,CAAgE,EAAhE,CAAJ,CAAyE,CAEvE,GAAI,IAAA,CAAKC,MAAL,CAAYC,oBAAhB,CAAsC,CACpC,GAAMC,SAAQ,CAAG,MAAM,CAACC,MAAP,CAAcC,WAAW,CAACC,QAAZD,EAAd,CAAA,CAAsCE,MAAtC,CACdC,SAAAA,OAAD,CAAa,CACX,GAAQC,WAAF,CAAyCD,OAA/C,CAAQC,UAAF,CAAcC,IAAd,CAAyCF,OAA/C,CAAoBE,IAAd,CAAoBC,gBAAAA,CAAqBH,OAA/C,CAA0BG,gBAAAA,CAC1B,MAEEF,WAAU,GAAK,KAAA,CAAKA,UAApBA,EAEAE,gBAFAF,EAIAD,OAAO,WAAYI,wBAAAA,CAAAA,OAJnBH,EAMAC,IANAD,EAQA,KAAA,CAAKC,IAAL,CAAUG,QAAV,CAAmBH,IAAnB,CAAA,CAEH,CAfc,CADmB,CAmBpC,IAAK,GAAMF,QAAX,GAAsBL,SAAtB,CAAgC,CAE9BK,OAAO,CAACM,eAARN,CAAwBb,EAAxBa,CAAAA,CACD,CACF,CACF,CACF,CACF,CAAA,sCAjCoCf,oBAAAA,CAAAA,OAAvC,E,aAoCeD,wB","sourcesContent":["import DiscreteGestureHandler from './DiscreteGestureHandler';\nimport { HammerInputExt } from './GestureHandler';\nimport * as NodeManager from './NodeManager';\nimport PressGestureHandler from './PressGestureHandler';\nimport { TEST_MIN_IF_NOT_NAN, VEC_LEN_SQ } from './utils';\n\nclass NativeViewGestureHandler extends PressGestureHandler {\n  onRawEvent(ev: HammerInputExt) {\n    super.onRawEvent(ev);\n    if (!ev.isFinal) {\n      // if (this.ref instanceof ScrollView) {\n      if (TEST_MIN_IF_NOT_NAN(VEC_LEN_SQ({ x: ev.deltaX, y: ev.deltaY }), 10)) {\n        // @ts-ignore FIXME(TS) config type\n        if (this.config.disallowInterruption) {\n          const gestures = Object.values(NodeManager.getNodes()).filter(\n            (gesture) => {\n              const { handlerTag, view, isGestureRunning } = gesture;\n              return (\n                // Check if this gesture isn't self\n                handlerTag !== this.handlerTag &&\n                // Ensure the gesture needs to be cancelled\n                isGestureRunning &&\n                // ScrollView can cancel discrete gestures like taps and presses\n                gesture instanceof DiscreteGestureHandler &&\n                // Ensure a view exists and is a child of the current view\n                view &&\n                // @ts-ignore FIXME(TS) view type\n                this.view.contains(view)\n              );\n            }\n          );\n          // Cancel all of the gestures that passed the filter\n          for (const gesture of gestures) {\n            // TODO: Bacon: Send some cached event.\n            gesture.forceInvalidate(ev);\n          }\n        }\n      }\n    }\n  }\n}\n\nexport default NativeViewGestureHandler;\n"]},"metadata":{},"sourceType":"script"}
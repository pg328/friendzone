{"ast":null,"code":"\"use strict\";var _construct=require(\"@babel/runtime/helpers/construct\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.GestureObjects=void 0;var _flingGesture=require(\"./flingGesture\");var _forceTouchGesture=require(\"./forceTouchGesture\");var _gestureComposition=require(\"./gestureComposition\");var _longPressGesture=require(\"./longPressGesture\");var _panGesture=require(\"./panGesture\");var _pinchGesture=require(\"./pinchGesture\");var _rotationGesture=require(\"./rotationGesture\");var _tapGesture=require(\"./tapGesture\");var _nativeGesture=require(\"./nativeGesture\");var _manualGesture=require(\"./manualGesture\");var GestureObjects={Tap:function Tap(){return new _tapGesture.TapGesture();},Pan:function Pan(){return new _panGesture.PanGesture();},Pinch:function Pinch(){return new _pinchGesture.PinchGesture();},Rotation:function Rotation(){return new _rotationGesture.RotationGesture();},Fling:function Fling(){return new _flingGesture.FlingGesture();},LongPress:function LongPress(){return new _longPressGesture.LongPressGesture();},ForceTouch:function ForceTouch(){return new _forceTouchGesture.ForceTouchGesture();},Native:function Native(){return new _nativeGesture.NativeGesture();},Manual:function Manual(){return new _manualGesture.ManualGesture();},Race:function Race(){for(var _len=arguments.length,gestures=new Array(_len),_key=0;_key<_len;_key++){gestures[_key]=arguments[_key];}return _construct(_gestureComposition.ComposedGesture,gestures);},Simultaneous:function Simultaneous(){for(var _len2=arguments.length,gestures=new Array(_len2),_key2=0;_key2<_len2;_key2++){gestures[_key2]=arguments[_key2];}return _construct(_gestureComposition.SimultaneousGesture,gestures);},Exclusive:function Exclusive(){for(var _len3=arguments.length,gestures=new Array(_len3),_key3=0;_key3<_len3;_key3++){gestures[_key3]=arguments[_key3];}return _construct(_gestureComposition.ExclusiveGesture,gestures);}};exports.GestureObjects=GestureObjects;","map":{"version":3,"sources":["gestureObjects.ts"],"names":["GestureObjects","Tap","TapGesture","Pan","PanGesture","Pinch","PinchGesture","Rotation","RotationGesture","Fling","FlingGesture","LongPress","LongPressGesture","ForceTouch","ForceTouchGesture","Native","NativeGesture","Manual","ManualGesture","Race","gestures","ComposedGesture","Simultaneous","SimultaneousGesture","Exclusive","ExclusiveGesture"],"mappings":"+JAAA,GAAA,cAAA,CAAA,OAAA,kBAAA,CACA,GAAA,mBAAA,CAAA,OAAA,uBAAA,CAEA,GAAA,oBAAA,CAAA,OAAA,wBAAA,CAKA,GAAA,kBAAA,CAAA,OAAA,sBAAA,CACA,GAAA,YAAA,CAAA,OAAA,gBAAA,CACA,GAAA,cAAA,CAAA,OAAA,kBAAA,CACA,GAAA,iBAAA,CAAA,OAAA,qBAAA,CACA,GAAA,YAAA,CAAA,OAAA,gBAAA,CACA,GAAA,eAAA,CAAA,OAAA,mBAAA,CACA,GAAA,eAAA,CAAA,OAAA,mBAAA,CAEO,GAAMA,eAAc,CAAG,CAC5BC,GAAG,CAAE,cAAM,CACT,MAAO,IAAIC,YAAAA,CAAAA,UAAJ,EAAP,CACD,CAH2B,CAK5BC,GAAG,CAAE,cAAM,CACT,MAAO,IAAIC,YAAAA,CAAAA,UAAJ,EAAP,CACD,CAP2B,CAS5BC,KAAK,CAAE,gBAAM,CACX,MAAO,IAAIC,cAAAA,CAAAA,YAAJ,EAAP,CACD,CAX2B,CAa5BC,QAAQ,CAAE,mBAAM,CACd,MAAO,IAAIC,iBAAAA,CAAAA,eAAJ,EAAP,CACD,CAf2B,CAiB5BC,KAAK,CAAE,gBAAM,CACX,MAAO,IAAIC,cAAAA,CAAAA,YAAJ,EAAP,CACD,CAnB2B,CAqB5BC,SAAS,CAAE,oBAAM,CACf,MAAO,IAAIC,kBAAAA,CAAAA,gBAAJ,EAAP,CACD,CAvB2B,CAyB5BC,UAAU,CAAE,qBAAM,CAChB,MAAO,IAAIC,mBAAAA,CAAAA,iBAAJ,EAAP,CACD,CA3B2B,CA6B5BC,MAAM,CAAE,iBAAM,CACZ,MAAO,IAAIC,eAAAA,CAAAA,aAAJ,EAAP,CACD,CA/B2B,CAiC5BC,MAAM,CAAE,iBAAM,CACZ,MAAO,IAAIC,eAAAA,CAAAA,aAAJ,EAAP,CACD,CAnC2B,CAyC5BC,IAAI,CAAE,eAA4B,+BAAxBC,QAAJ,0CAAIA,QAAJ,wBACJ,kBAAWC,mBAAAA,CAAAA,eAAJ,CAAuBD,QAA9B,EACD,CA3C2B,CAgD5BE,YAAY,wBAAyB,gCAArBF,QAAJ,+CAAIA,QAAJ,0BACV,kBAAWG,mBAAAA,CAAAA,mBAAJ,CAA2BH,QAAlC,EACD,CAlD2B,CA2D5BI,SAAS,qBAAyB,gCAArBJ,QAAJ,+CAAIA,QAAJ,0BACP,kBAAWK,mBAAAA,CAAAA,gBAAJ,CAAwBL,QAA/B,EACD,CA7D2B,CAAvB,C","sourcesContent":["import { FlingGesture } from './flingGesture';\nimport { ForceTouchGesture } from './forceTouchGesture';\nimport { Gesture } from './gesture';\nimport {\n  ComposedGesture,\n  ExclusiveGesture,\n  SimultaneousGesture,\n} from './gestureComposition';\nimport { LongPressGesture } from './longPressGesture';\nimport { PanGesture } from './panGesture';\nimport { PinchGesture } from './pinchGesture';\nimport { RotationGesture } from './rotationGesture';\nimport { TapGesture } from './tapGesture';\nimport { NativeGesture } from './nativeGesture';\nimport { ManualGesture } from './manualGesture';\n\nexport const GestureObjects = {\n  Tap: () => {\n    return new TapGesture();\n  },\n\n  Pan: () => {\n    return new PanGesture();\n  },\n\n  Pinch: () => {\n    return new PinchGesture();\n  },\n\n  Rotation: () => {\n    return new RotationGesture();\n  },\n\n  Fling: () => {\n    return new FlingGesture();\n  },\n\n  LongPress: () => {\n    return new LongPressGesture();\n  },\n\n  ForceTouch: () => {\n    return new ForceTouchGesture();\n  },\n\n  Native: () => {\n    return new NativeGesture();\n  },\n\n  Manual: () => {\n    return new ManualGesture();\n  },\n\n  /**\n   * Builds a composed gesture consisting of gestures provided as parameters.\n   * The first one that becomes active cancels the rest of gestures.\n   */\n  Race: (...gestures: Gesture[]) => {\n    return new ComposedGesture(...gestures);\n  },\n\n  /**\n   * Builds a composed gesture that allows all base gestures to run simultaneously.\n   */\n  Simultaneous(...gestures: Gesture[]) {\n    return new SimultaneousGesture(...gestures);\n  },\n\n  /**\n   * Builds a composed gesture where only one of the provided gestures can become active.\n   * Priority is decided through the order of gestures: the first one has higher priority\n   * than the second one, second one has higher priority than the third one, and so on.\n   * For example, to make a gesture that recognizes both single and double tap you need\n   * to call Exclusive(doubleTap, singleTap).\n   */\n  Exclusive(...gestures: Gesture[]) {\n    return new ExclusiveGesture(...gestures);\n  },\n};\n"]},"metadata":{},"sourceType":"script"}
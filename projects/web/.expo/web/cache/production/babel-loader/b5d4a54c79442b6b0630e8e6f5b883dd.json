{"ast":null,"code":"\"use strict\";var _defineProperty=require(\"@babel/runtime/helpers/defineProperty\");var _toConsumableArray=require(\"@babel/runtime/helpers/toConsumableArray\");function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=createNativeWrapper;var React=_interopRequireWildcard(require(\"react\"));var _NativeViewGestureHandler=require(\"./NativeViewGestureHandler\");function _getRequireWildcardCache(){if(typeof WeakMap!==\"function\")return null;var cache=new WeakMap();_getRequireWildcardCache=function _getRequireWildcardCache(){return cache;};return cache;}function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj;}if(obj===null||typeof obj!==\"object\"&&typeof obj!==\"function\"){return{default:obj};}var cache=_getRequireWildcardCache();if(cache&&cache.has(obj)){return cache.get(obj);}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc);}else{newObj[key]=obj[key];}}}newObj.default=obj;if(cache){cache.set(obj,newObj);}return newObj;}function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}var NATIVE_WRAPPER_PROPS_FILTER=[].concat(_toConsumableArray(_NativeViewGestureHandler.nativeViewProps),['onGestureHandlerEvent','onGestureHandlerStateChange']);function createNativeWrapper(Component){var config=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var _Component$render;var ComponentWrapper=React.forwardRef(function(props,ref){var gestureHandlerProps=Object.keys(props).reduce(function(res,key){var allowedKeys=NATIVE_WRAPPER_PROPS_FILTER;if(allowedKeys.includes(key)){res[key]=props[key];}return res;},_objectSpread({},config));var _ref=(0,React.useRef)();var _gestureHandlerRef=(0,React.useRef)();(0,React.useImperativeHandle)(ref,function(){var node=_gestureHandlerRef.current;if(_ref.current&&node){_ref.current.handlerTag=node.handlerTag;return _ref.current;}return null;},[_ref,_gestureHandlerRef]);return React.createElement(_NativeViewGestureHandler.NativeViewGestureHandler,_extends({},gestureHandlerProps,{ref:_gestureHandlerRef}),React.createElement(Component,_extends({},props,{ref:_ref})));});ComponentWrapper.displayName=(Component===null||Component===void 0?void 0:Component.displayName)||(Component===null||Component===void 0?void 0:(_Component$render=Component.render)===null||_Component$render===void 0?void 0:_Component$render.name)||typeof Component==='string'&&Component||'ComponentWrapper';return ComponentWrapper;}","map":{"version":3,"sources":["createNativeWrapper.tsx"],"names":["NATIVE_WRAPPER_PROPS_FILTER","nativeViewProps","createNativeWrapper","Component","config","ComponentWrapper","forwardRef","props","ref","gestureHandlerProps","keys","reduce","res","key","allowedKeys","includes","_ref","_gestureHandlerRef","node","current","handlerTag","displayName","render","name"],"mappings":"+/BAAA,GAAA,MAAA,CAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA,CAGA,GAAA,0BAAA,CAAA,OAAA,8BAAA,C,qmCAaA,GAAMA,4BAA2B,8BAC5BC,yBAAAA,CAAAA,eAD+B,GAElC,uBAFkC,CAGlC,6BAHkC,EAApC,CAMe,QAASC,oBAAT,CACbC,SADa,CAGb,IADAC,OAA+C,2DAAG,CAAA,CAFrC,CAGb,GAAA,kBAAA,CACA,GAAMC,iBAAgB,CAAG,KAAK,CAACC,UAAN,CAGvB,SAACC,KAAD,CAAQC,GAAR,CAAgB,CAEhB,GAAMC,oBAAmB,CAAG,MAAM,CAACC,IAAP,CAAYH,KAAZ,CAAA,CAAmBI,MAAnB,CAC1B,SAACC,GAAD,CAAMC,GAAN,CAAc,CAEZ,GAAMC,YAA8B,CAAGd,2BAAvC,CACA,GAAIc,WAAW,CAACC,QAAZD,CAAqBD,GAArBC,CAAJ,CAA+B,CAE7BF,GAAG,CAACC,GAAD,CAAHD,CAAWL,KAAK,CAACM,GAAD,CAAhBD,CACD,CACD,MAAOA,IAAP,CACD,CATyB,kBAUrBR,MAAAA,EAVP,CAYA,GAAMY,KAAI,CAAG,CAAA,CAAA,CAAA,KAAA,CAAA,MAAA,GAAb,CACA,GAAMC,mBAAkB,CAAG,CAAA,CAAA,CAAA,KAAA,CAAA,MAAA,GAA3B,CACA,CAAA,CAAA,CAAA,KAAA,CAAA,mBAAA,EACET,GADF,CAGE,UAAM,CACJ,GAAMU,KAAI,CAAGD,kBAAkB,CAACE,OAD5B,CAGJ,GAAIH,IAAI,CAACG,OAALH,EAAgBE,IAApB,CAA0B,CAExBF,IAAI,CAACG,OAALH,CAAaI,UAAbJ,CAA0BE,IAAI,CAACE,UAA/BJ,CACA,MAAOA,KAAI,CAACG,OAAZ,CACD,CACD,MAAO,KAAP,CACD,CAZH,CAaE,CAACH,IAAD,CAAOC,kBAAP,CAbF,CAAA,CAeA,MACE,MAAA,CAAA,aAAA,CAAC,yBAAA,CAAA,wBAAD,CAAA,QAAA,CAAA,CAAA,CAAA,CACMR,mBADN,CAAA,CAGE,GAAG,CAAEQ,kBAHP,CAAA,CAAA,CAIE,KAAA,CAAA,aAAA,CAAC,SAAD,CAAA,QAAA,CAAA,CAAA,CAAA,CAAeV,KAAf,CAAA,CAAsB,GAAG,CAAES,IAA3B,CAAA,CAAA,CAJF,CADF,CAQD,CA1CwB,CADzB,CA8CAX,gBAAgB,CAACgB,WAAjBhB,CACE,CAAA,SAAS,GAAA,IAAT,EAAA,SAAS,GAAA,IAAA,EAAT,CAAA,IAAA,EAAA,CAAA,SAAS,CAAEgB,WAAX,IAEAlB,SAFA,GAAA,IAAA,EAEAA,SAFA,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAA,CAAA,iBAAA,CAEAA,SAAS,CAAEmB,MAFX,IAAA,IAAA,EAAA,iBAAA,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAEAnB,iBAAAA,CAAmBoB,IAFnB,CAAA,EAGC,MAAOpB,UAAP,GAAqB,QAArB,EAAiCA,SAHlC,EAIA,kBALFE,CAOA,MAAOA,iBAAP,CACD","sourcesContent":["import * as React from 'react';\nimport { useImperativeHandle, useRef } from 'react';\n\nimport {\n  NativeViewGestureHandler,\n  NativeViewGestureHandlerProps,\n  nativeViewProps,\n} from './NativeViewGestureHandler';\n\n/*\n * This array should consist of:\n *   - All keys in propTypes from NativeGestureHandler\n *     (and all keys in GestureHandlerPropTypes)\n *   - 'onGestureHandlerEvent'\n *   - 'onGestureHandlerStateChange'\n */\nconst NATIVE_WRAPPER_PROPS_FILTER = [\n  ...nativeViewProps,\n  'onGestureHandlerEvent',\n  'onGestureHandlerStateChange',\n] as const;\n\nexport default function createNativeWrapper<P>(\n  Component: React.ComponentType<P>,\n  config: Readonly<NativeViewGestureHandlerProps> = {}\n) {\n  const ComponentWrapper = React.forwardRef<\n    React.ComponentType<any>,\n    P & NativeViewGestureHandlerProps\n  >((props, ref) => {\n    // filter out props that should be passed to gesture handler wrapper\n    const gestureHandlerProps = Object.keys(props).reduce(\n      (res, key) => {\n        // TS being overly protective with it's types, see https://github.com/microsoft/TypeScript/issues/26255#issuecomment-458013731 for more info\n        const allowedKeys: readonly string[] = NATIVE_WRAPPER_PROPS_FILTER;\n        if (allowedKeys.includes(key)) {\n          // @ts-ignore FIXME(TS)\n          res[key] = props[key];\n        }\n        return res;\n      },\n      { ...config } // watch out not to modify config\n    );\n    const _ref = useRef<React.ComponentType<P>>();\n    const _gestureHandlerRef = useRef<React.ComponentType<P>>();\n    useImperativeHandle(\n      ref,\n      // @ts-ignore TODO(TS) decide how nulls work in this context\n      () => {\n        const node = _gestureHandlerRef.current;\n        // add handlerTag for relations config\n        if (_ref.current && node) {\n          // @ts-ignore FIXME(TS) think about createHandler return type\n          _ref.current.handlerTag = node.handlerTag;\n          return _ref.current;\n        }\n        return null;\n      },\n      [_ref, _gestureHandlerRef]\n    );\n    return (\n      <NativeViewGestureHandler\n        {...gestureHandlerProps}\n        // @ts-ignore TODO(TS)\n        ref={_gestureHandlerRef}>\n        <Component {...props} ref={_ref} />\n      </NativeViewGestureHandler>\n    );\n  });\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  ComponentWrapper.displayName =\n    Component?.displayName ||\n    // @ts-ignore if render doesn't exist it will return undefined and go further\n    Component?.render?.name ||\n    (typeof Component === 'string' && Component) ||\n    'ComponentWrapper';\n\n  return ComponentWrapper;\n}\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"import{Reanimated}from\"./reanimatedWrapper\";import{State}from\"../../State\";import{tagMessage}from\"../../utils\";var warningMessage=tagMessage('react-native-reanimated is required in order to use synchronous state management');var REANIMATED_AVAILABLE=(Reanimated===null||Reanimated===void 0?void 0:Reanimated.useSharedValue)!==undefined;var setGestureState=Reanimated===null||Reanimated===void 0?void 0:Reanimated.setGestureState;export var GestureStateManager={create:function create(handlerTag){'worklet';return{begin:function begin(){'worklet';if(REANIMATED_AVAILABLE){setGestureState(handlerTag,State.BEGAN);}else{console.warn(warningMessage);}},activate:function activate(){'worklet';if(REANIMATED_AVAILABLE){setGestureState(handlerTag,State.ACTIVE);}else{console.warn(warningMessage);}},fail:function fail(){'worklet';if(REANIMATED_AVAILABLE){setGestureState(handlerTag,State.FAILED);}else{console.warn(warningMessage);}},end:function end(){'worklet';if(REANIMATED_AVAILABLE){setGestureState(handlerTag,State.END);}else{console.warn(warningMessage);}}};}};","map":{"version":3,"sources":["gestureStateManager.ts"],"names":["Reanimated","State","tagMessage","warningMessage","REANIMATED_AVAILABLE","useSharedValue","undefined","setGestureState","GestureStateManager","create","handlerTag","begin","BEGAN","console","warn","activate","ACTIVE","fail","FAILED","end","END"],"mappings":"AAAA,OAASA,UAAT,2BACA,OAASC,KAAT,mBACA,OAASC,UAAT,mBASA,GAAMC,eAAc,CAAGD,UAAU,CAC/B,kFAD+B,CAAjC,CAMA,GAAME,qBAAoB,CAAG,CAAA,UAAU,GAAA,IAAV,EAAA,UAAU,GAAA,IAAA,EAAV,CAAA,IAAA,EAAA,CAAA,UAAU,CAAEC,cAAZ,IAA+BC,SAA5D,CACA,GAAMC,gBAAe,CAAGP,UAAH,GAAA,IAAA,EAAGA,UAAH,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAGA,UAAU,CAAEO,eAApC,CAEA,MAAO,IAAMC,oBAAmB,CAAG,CACjCC,MAAM,iBAACC,UAAD,CAA8C,CAClD,SAAA,CACA,MAAO,CACLC,KAAK,CAAE,gBAAM,CACX,SAAA,CACA,GAAIP,oBAAJ,CAA0B,CACxBG,eAAe,CAACG,UAAD,CAAaT,KAAK,CAACW,KAAnB,CAAfL,CACD,CAFD,IAEO,CACLM,OAAO,CAACC,IAARD,CAAaV,cAAbU,CAAAA,CACD,CACF,CARI,CAULE,QAAQ,CAAE,mBAAM,CACd,SAAA,CACA,GAAIX,oBAAJ,CAA0B,CACxBG,eAAe,CAACG,UAAD,CAAaT,KAAK,CAACe,MAAnB,CAAfT,CACD,CAFD,IAEO,CACLM,OAAO,CAACC,IAARD,CAAaV,cAAbU,CAAAA,CACD,CACF,CAjBI,CAmBLI,IAAI,CAAE,eAAM,CACV,SAAA,CACA,GAAIb,oBAAJ,CAA0B,CACxBG,eAAe,CAACG,UAAD,CAAaT,KAAK,CAACiB,MAAnB,CAAfX,CACD,CAFD,IAEO,CACLM,OAAO,CAACC,IAARD,CAAaV,cAAbU,CAAAA,CACD,CACF,CA1BI,CA4BLM,GAAG,CAAE,cAAM,CACT,SAAA,CACA,GAAIf,oBAAJ,CAA0B,CACxBG,eAAe,CAACG,UAAD,CAAaT,KAAK,CAACmB,GAAnB,CAAfb,CACD,CAFD,IAEO,CACLM,OAAO,CAACC,IAARD,CAAaV,cAAbU,CAAAA,CACD,CACF,CAnCI,CAAP,CAqCD,CAxCgC,CAA5B","sourcesContent":["import { Reanimated } from './reanimatedWrapper';\nimport { State } from '../../State';\nimport { tagMessage } from '../../utils';\n\nexport interface GestureStateManagerType {\n  begin: () => void;\n  activate: () => void;\n  fail: () => void;\n  end: () => void;\n}\n\nconst warningMessage = tagMessage(\n  'react-native-reanimated is required in order to use synchronous state management'\n);\n\n// check if reanimated module is available, but look for useSharedValue as conditional\n// require of reanimated can sometimes return content of `utils.ts` file (?)\nconst REANIMATED_AVAILABLE = Reanimated?.useSharedValue !== undefined;\nconst setGestureState = Reanimated?.setGestureState;\n\nexport const GestureStateManager = {\n  create(handlerTag: number): GestureStateManagerType {\n    'worklet';\n    return {\n      begin: () => {\n        'worklet';\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, State.BEGAN);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n\n      activate: () => {\n        'worklet';\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, State.ACTIVE);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n\n      fail: () => {\n        'worklet';\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, State.FAILED);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n\n      end: () => {\n        'worklet';\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, State.END);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n    };\n  },\n};\n"]},"metadata":{},"sourceType":"module"}
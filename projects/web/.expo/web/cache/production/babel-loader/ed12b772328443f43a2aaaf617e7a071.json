{"ast":null,"code":"import AnimatedValue from\"../core/InternalAnimatedValue\";import{createAnimatedSet as set}from\"../core/AnimatedSet\";import{createAnimatedCall as call}from\"../core/AnimatedCall\";import{createAnimatedAlways as always}from\"../core/AnimatedAlways\";import{createAnimatedCond as cond}from\"../core/AnimatedCond\";export function evaluateOnce(node){var input=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];var callback=arguments.length>2?arguments[2]:undefined;if(!Array.isArray(input)){input=[input];}var done=new AnimatedValue(0);var evalNode=cond(done,0,call([node,set(done,1)],function(){callback&&callback();for(var i=0;i<input.length;i++){input[i].__removeChild(alwaysNode);alwaysNode.__detach();}}));var alwaysNode=always(evalNode);for(var i=0;i<input.length;i++){input[i].__addChild(alwaysNode);alwaysNode.__attach();}}","map":{"version":3,"names":["AnimatedValue","createAnimatedSet","set","createAnimatedCall","call","createAnimatedAlways","always","createAnimatedCond","cond","evaluateOnce","node","input","callback","Array","isArray","done","evalNode","i","length","__removeChild","alwaysNode","__detach","__addChild","__attach"],"sources":["/Users/pg328/Projects/friendzone/node_modules/react-native-reanimated/lib/reanimated1/derived/evaluateOnce.js"],"sourcesContent":["import AnimatedValue from '../core/InternalAnimatedValue';\nimport { createAnimatedSet as set } from '../core/AnimatedSet';\nimport { createAnimatedCall as call } from '../core/AnimatedCall';\nimport { createAnimatedAlways as always } from '../core/AnimatedAlways';\nimport { createAnimatedCond as cond } from '../core/AnimatedCond';\n\n/**\n * evaluate given node and notify children\n * @param node - node to be evaluated\n * @param input - nodes (or one node) representing values which states input for node.\n * @param callback - after callback\n */\n\nexport function evaluateOnce(node, input = [], callback) {\n  if (!Array.isArray(input)) {\n    input = [input];\n  }\n  const done = new AnimatedValue(0);\n  const evalNode = cond(\n    done,\n    0,\n    call([node, set(done, 1)], () => {\n      callback && callback();\n      for (let i = 0; i < input.length; i++) {\n        input[i].__removeChild(alwaysNode);\n        alwaysNode.__detach();\n      }\n    })\n  );\n  const alwaysNode = always(evalNode);\n  for (let i = 0; i < input.length; i++) {\n    input[i].__addChild(alwaysNode);\n    alwaysNode.__attach();\n  }\n}\n"],"mappings":"AAAA,MAAOA,cAAa,qCACpB,OAASC,iBAAiB,GAAIC,IAAG,2BACjC,OAASC,kBAAkB,GAAIC,KAAI,4BACnC,OAASC,oBAAoB,GAAIC,OAAM,8BACvC,OAASC,kBAAkB,GAAIC,KAAI,4BASnC,MAAO,SAASC,aAAY,CAACC,IAAI,CAAwB,IAAtBC,MAAK,2DAAG,EAAE,IAAEC,SAAQ,2CACrD,GAAI,CAACC,KAAK,CAACC,OAAO,CAACH,KAAK,CAAC,CAAE,CACzBA,KAAK,CAAG,CAACA,KAAK,CAAC,CACjB,CACA,GAAMI,KAAI,CAAG,GAAIf,cAAa,CAAC,CAAC,CAAC,CACjC,GAAMgB,SAAQ,CAAGR,IAAI,CACnBO,IAAI,CACJ,CAAC,CACDX,IAAI,CAAC,CAACM,IAAI,CAAER,GAAG,CAACa,IAAI,CAAE,CAAC,CAAC,CAAC,CAAE,UAAM,CAC/BH,QAAQ,EAAIA,QAAQ,EAAE,CACtB,IAAK,GAAIK,EAAC,CAAG,CAAC,CAAEA,CAAC,CAAGN,KAAK,CAACO,MAAM,CAAED,CAAC,EAAE,CAAE,CACrCN,KAAK,CAACM,CAAC,CAAC,CAACE,aAAa,CAACC,UAAU,CAAC,CAClCA,UAAU,CAACC,QAAQ,EAAE,CACvB,CACF,CAAC,CAAC,CACH,CACD,GAAMD,WAAU,CAAGd,MAAM,CAACU,QAAQ,CAAC,CACnC,IAAK,GAAIC,EAAC,CAAG,CAAC,CAAEA,CAAC,CAAGN,KAAK,CAACO,MAAM,CAAED,CAAC,EAAE,CAAE,CACrCN,KAAK,CAACM,CAAC,CAAC,CAACK,UAAU,CAACF,UAAU,CAAC,CAC/BA,UAAU,CAACG,QAAQ,EAAE,CACvB,CACF"},"metadata":{},"sourceType":"module"}
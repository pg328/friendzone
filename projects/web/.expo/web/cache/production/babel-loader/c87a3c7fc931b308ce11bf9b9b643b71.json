{"ast":null,"code":"\"use strict\";var _slicedToArray=require(\"@babel/runtime/helpers/slicedToArray\");var _toConsumableArray=require(\"@babel/runtime/helpers/toConsumableArray\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.toArray=toArray;exports.withPrevAndCurrent=withPrevAndCurrent;exports.hasProperty=hasProperty;exports.isJestEnv=isJestEnv;exports.tagMessage=tagMessage;exports.isFabric=isFabric;exports.shouldUseCodegenNativeComponent=shouldUseCodegenNativeComponent;exports.isRemoteDebuggingEnabled=isRemoteDebuggingEnabled;var _package=_interopRequireDefault(require(\"react-native/package.json\"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var rnVersion=_package.default.version;function toArray(object){if(!Array.isArray(object)){return[object];}return object;}function withPrevAndCurrent(array,mapFn){var previousArr=[null];var currentArr=_toConsumableArray(array);var transformedArr=[];currentArr.forEach(function(current,i){var previous=previousArr[i];var transformed=mapFn(previous,current);previousArr.push(transformed);transformedArr.push(transformed);});return transformedArr;}function hasProperty(object,key){return Object.prototype.hasOwnProperty.call(object,key);}function isJestEnv(){return hasProperty(global,'process')&&!!process.env.JEST_WORKER_ID;}function tagMessage(msg){return\"[react-native-gesture-handler] \"+msg;}function isFabric(){var _global;return!!((_global=global)!==null&&_global!==void 0&&_global.nativeFabricUIManager);}function shouldUseCodegenNativeComponent(){var _rnVersion$split=rnVersion.split('.'),_rnVersion$split2=_slicedToArray(_rnVersion$split,2),majorStr=_rnVersion$split2[0],minorStr=_rnVersion$split2[1];var major=Number.parseInt(majorStr);var minor=Number.parseInt(minorStr);return minor>=68||major>0;}function isRemoteDebuggingEnabled(){return!global.nativeCallSyncHook||global.__REMOTEDEV__;}","map":{"version":3,"sources":["utils.ts"],"names":["rnVersion","pack","version","toArray","object","Array","isArray","withPrevAndCurrent","array","mapFn","previousArr","currentArr","transformedArr","forEach","current","i","previous","transformed","push","hasProperty","key","Object","prototype","hasOwnProperty","call","isJestEnv","global","process","env","JEST_WORKER_ID","tagMessage","msg","isFabric","nativeFabricUIManager","shouldUseCodegenNativeComponent","majorStr","minorStr","split","major","Number","parseInt","minor","isRemoteDebuggingEnabled","nativeCallSyncHook","__REMOTEDEV__"],"mappings":"ghBAAA,GAAA,SAAA,CAAA,sBAAA,CAAA,OAAA,CAAA,2BAAA,CAAA,CAAA,C,mFAEA,GAAMA,UAAS,CAAGC,QAAAA,CAAAA,OAAAA,CAAKC,OAAvB,CAEO,QAASC,QAAT,CAAoBC,MAApB,CAA0C,CAC/C,GAAI,CAACC,KAAK,CAACC,OAAND,CAAcD,MAAdC,CAAL,CAA4B,CAC1B,MAAO,CAACD,MAAD,CAAP,CACD,CAED,MAAOA,OAAP,CACD,CAMM,QAASG,mBAAT,CACLC,KADK,CAELC,KAFK,CAGU,CACf,GAAMC,YAAmC,CAAG,CAAC,IAAD,CAA5C,CACA,GAAMC,WAAU,oBAAOH,KAAJ,CAAnB,CACA,GAAMI,eAA6B,CAAG,EAAtC,CACAD,UAAU,CAACE,OAAXF,CAAmB,SAACG,OAAD,CAAUC,CAAV,CAAgB,CACjC,GAAMC,SAAQ,CAAGN,WAAW,CAACK,CAAD,CAA5B,CACA,GAAME,YAAW,CAAGR,KAAK,CAACO,QAAD,CAAWF,OAAX,CAAzB,CACAJ,WAAW,CAACQ,IAAZR,CAAiBO,WAAjBP,CAAAA,CACAE,cAAc,CAACM,IAAfN,CAAoBK,WAApBL,CAAAA,CACD,CALDD,CAAAA,CAMA,MAAOC,eAAP,CACD,CAGM,QAASO,YAAT,CAAqBf,MAArB,CAAqCgB,GAArC,CAAkD,CACvD,MAAOC,OAAM,CAACC,SAAPD,CAAiBE,cAAjBF,CAAgCG,IAAhCH,CAAqCjB,MAArCiB,CAA6CD,GAA7CC,CAAP,CACD,CAEM,QAASI,UAAT,EAA8B,CAEnC,MAAON,YAAW,CAACO,MAAD,CAAS,SAAT,CAAXP,EAAkC,CAAC,CAACQ,OAAO,CAACC,GAARD,CAAYE,cAAvD,CACD,CAEM,QAASC,WAAT,CAAoBC,GAApB,CAAiC,CACtC,wCAAyCA,GAAzC,CACD,CAIM,QAASC,SAAT,EAA6B,CAAA,GAAA,QAAA,CAElC,MAAO,CAAC,EAAA,CAAA,OAAA,CAACN,MAAD,IAAA,IAAA,EAAA,OAAA,GAAA,IAAA,EAAA,EAACA,OAAAA,CAAQO,qBAAT,CAAR,CACD,CAEM,QAASC,gCAAT,EAAoD,CACzD,qBAA6BlC,SAAS,CAACqC,KAAVrC,CAAgB,GAAhBA,CAA7B,sDAAOmC,QAAD,sBAAWC,QAAX,sBACN,GAAME,MAAK,CAAGC,MAAM,CAACC,QAAPD,CAAgBJ,QAAhBI,CAAd,CACA,GAAME,MAAK,CAAGF,MAAM,CAACC,QAAPD,CAAgBH,QAAhBG,CAH2C,CAMzD,MAAOE,MAAK,EAAI,EAATA,EAAeH,KAAK,CAAG,CAA9B,CACD,CAEM,QAASI,yBAAT,EAA6C,CAGlD,MAAO,CAAEhB,MAAD,CAAgBiB,kBAAjB,EAAwCjB,MAAD,CAAgBkB,aAA9D,CACD","sourcesContent":["import pack from 'react-native/package.json';\n\nconst rnVersion = pack.version;\n\nexport function toArray<T>(object: T | T[]): T[] {\n  if (!Array.isArray(object)) {\n    return [object];\n  }\n\n  return object;\n}\n\nexport type withPrevAndCurrentMapFn<T, Transformed> = (\n  previous: Transformed | null,\n  current: T\n) => Transformed;\nexport function withPrevAndCurrent<T, Transformed>(\n  array: T[],\n  mapFn: withPrevAndCurrentMapFn<T, Transformed>\n): Transformed[] {\n  const previousArr: (null | Transformed)[] = [null];\n  const currentArr = [...array];\n  const transformedArr: Transformed[] = [];\n  currentArr.forEach((current, i) => {\n    const previous = previousArr[i];\n    const transformed = mapFn(previous, current);\n    previousArr.push(transformed);\n    transformedArr.push(transformed);\n  });\n  return transformedArr;\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function hasProperty(object: object, key: string) {\n  return Object.prototype.hasOwnProperty.call(object, key);\n}\n\nexport function isJestEnv(): boolean {\n  // @ts-ignore Do not use `@types/node` because it will prioritise Node types over RN types which breaks the types (ex. setTimeout) in React Native projects.\n  return hasProperty(global, 'process') && !!process.env.JEST_WORKER_ID;\n}\n\nexport function tagMessage(msg: string) {\n  return `[react-native-gesture-handler] ${msg}`;\n}\n\n// helper method to check whether Fabric is enabled, however global.nativeFabricUIManager\n// may not be initialized before the first render\nexport function isFabric(): boolean {\n  // @ts-expect-error nativeFabricUIManager is not yet included in the RN types\n  return !!global?.nativeFabricUIManager;\n}\n\nexport function shouldUseCodegenNativeComponent(): boolean {\n  const [majorStr, minorStr] = rnVersion.split('.');\n  const major = Number.parseInt(majorStr);\n  const minor = Number.parseInt(minorStr);\n\n  // use codegenNativeComponent starting with RN 0.68\n  return minor >= 68 || major > 0;\n}\n\nexport function isRemoteDebuggingEnabled(): boolean {\n  // react-native-reanimated checks if in remote debugging in the same way\n  // @ts-ignore global is available but node types are not included\n  return !(global as any).nativeCallSyncHook || (global as any).__REMOTEDEV__;\n}\n"]},"metadata":{},"sourceType":"script"}
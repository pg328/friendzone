{"ast":null,"code":"\"use strict\";var _toConsumableArray=require(\"@babel/runtime/helpers/toConsumableArray\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.NativeViewGestureHandler=exports.nativeViewHandlerName=exports.nativeViewProps=exports.nativeViewGestureHandlerProps=void 0;var _createHandler=_interopRequireDefault(require(\"./createHandler\"));var _gestureHandlerCommon=require(\"./gestureHandlerCommon\");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var nativeViewGestureHandlerProps=['shouldActivateOnStart','disallowInterruption'];exports.nativeViewGestureHandlerProps=nativeViewGestureHandlerProps;var nativeViewProps=[].concat(_toConsumableArray(_gestureHandlerCommon.baseGestureHandlerProps),nativeViewGestureHandlerProps);exports.nativeViewProps=nativeViewProps;var nativeViewHandlerName='NativeViewGestureHandler';exports.nativeViewHandlerName=nativeViewHandlerName;var NativeViewGestureHandler=(0,_createHandler.default)({name:nativeViewHandlerName,allowedProps:nativeViewProps,config:{}});exports.NativeViewGestureHandler=NativeViewGestureHandler;","map":{"version":3,"sources":["NativeViewGestureHandler.ts"],"names":["nativeViewGestureHandlerProps","nativeViewProps","baseGestureHandlerProps","nativeViewHandlerName","NativeViewGestureHandler","name","allowedProps","config"],"mappings":"qRAAA,GAAA,eAAA,CAAA,sBAAA,CAAA,OAAA,mBAAA,CAAA,CACA,GAAA,sBAAA,CAAA,OAAA,0BAAA,C,mFAKO,GAAMA,8BAA6B,CAAG,CAC3C,uBAD2C,CAE3C,sBAF2C,CAAtC,C,oEAgCA,GAAMC,gBAAe,8BACvBC,qBAAAA,CAAAA,uBAD0B,EAE1BF,6BAF0B,CAAxB,C,wCAKA,GAAMG,sBAAqB,CAAG,0BAA9B,C,oDAIA,GAAMC,yBAAwB,CAAG,CAAA,CAAA,CAAA,cAAA,CAAA,OAAA,EAGtC,CACAC,IAAI,CAAEF,qBADN,CAEAG,YAAY,CAAEL,eAFd,CAGAM,MAAM,CAAE,CAAA,CAHR,CAHsC,CAAjC,C","sourcesContent":["import createHandler from './createHandler';\nimport {\n  BaseGestureHandlerProps,\n  baseGestureHandlerProps,\n} from './gestureHandlerCommon';\n\nexport const nativeViewGestureHandlerProps = [\n  'shouldActivateOnStart',\n  'disallowInterruption',\n] as const;\n\nexport interface NativeViewGestureConfig {\n  /**\n   * Android only.\n   *\n   * Determines whether the handler should check for an existing touch event on\n   * instantiation.\n   */\n  shouldActivateOnStart?: boolean;\n\n  /**\n   * When `true`, cancels all other gesture handlers when this\n   * `NativeViewGestureHandler` receives an `ACTIVE` state event.\n   */\n  disallowInterruption?: boolean;\n}\n\nexport interface NativeViewGestureHandlerProps\n  extends BaseGestureHandlerProps<NativeViewGestureHandlerPayload>,\n    NativeViewGestureConfig {}\n\nexport type NativeViewGestureHandlerPayload = {\n  /**\n   * True if gesture was performed inside of containing view, false otherwise.\n   */\n  pointerInside: boolean;\n};\n\nexport const nativeViewProps = [\n  ...baseGestureHandlerProps,\n  ...nativeViewGestureHandlerProps,\n] as const;\n\nexport const nativeViewHandlerName = 'NativeViewGestureHandler';\n\nexport type NativeViewGestureHandler = typeof NativeViewGestureHandler;\n// eslint-disable-next-line @typescript-eslint/no-redeclare -- backward compatibility; see description on the top of gestureHandlerCommon.ts file\nexport const NativeViewGestureHandler = createHandler<\n  NativeViewGestureHandlerProps,\n  NativeViewGestureHandlerPayload\n>({\n  name: nativeViewHandlerName,\n  allowedProps: nativeViewProps,\n  config: {},\n});\n"]},"metadata":{},"sourceType":"script"}
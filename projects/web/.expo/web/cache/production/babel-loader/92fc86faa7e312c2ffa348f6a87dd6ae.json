{"ast":null,"code":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.getNextHandlerTag=getNextHandlerTag;exports.registerHandler=registerHandler;exports.registerOldGestureHandler=registerOldGestureHandler;exports.unregisterHandler=unregisterHandler;exports.findHandler=findHandler;exports.findOldGestureHandler=findOldGestureHandler;exports.findHandlerByTestID=findHandlerByTestID;exports.handlerIDToTag=void 0;var _utils=require(\"../utils\");var handlerIDToTag={};exports.handlerIDToTag=handlerIDToTag;var gestures=new Map();var oldHandlers=new Map();var testIDs=new Map();var handlerTag=1;function getNextHandlerTag(){return handlerTag++;}function registerHandler(handlerTag,handler,testID){gestures.set(handlerTag,handler);if((0,_utils.isJestEnv)()&&testID){testIDs.set(testID,handlerTag);}}function registerOldGestureHandler(handlerTag,handler){oldHandlers.set(handlerTag,handler);}function unregisterHandler(handlerTag,testID){gestures.delete(handlerTag);if((0,_utils.isJestEnv)()&&testID){testIDs.delete(testID);}}function findHandler(handlerTag){return gestures.get(handlerTag);}function findOldGestureHandler(handlerTag){return oldHandlers.get(handlerTag);}function findHandlerByTestID(testID){var handlerTag=testIDs.get(testID);if(handlerTag!==undefined){var _findHandler;return(_findHandler=findHandler(handlerTag))!==null&&_findHandler!==void 0?_findHandler:null;}return null;}","map":{"version":3,"sources":["handlersRegistry.ts"],"names":["handlerIDToTag","gestures","Map","oldHandlers","testIDs","handlerTag","getNextHandlerTag","registerHandler","handler","testID","set","registerOldGestureHandler","unregisterHandler","delete","findHandler","get","findOldGestureHandler","findHandlerByTestID","undefined"],"mappings":"oaAAA,GAAA,OAAA,CAAA,OAAA,YAAA,CAIO,GAAMA,eAAsC,CAAG,CAAA,CAA/C,C,sCACP,GAAMC,SAAQ,CAAG,GAAIC,IAAJ,EAAjB,CACA,GAAMC,YAAW,CAAG,GAAID,IAAJ,EAApB,CACA,GAAME,QAAO,CAAG,GAAIF,IAAJ,EAAhB,CAEA,GAAIG,WAAU,CAAG,CAAjB,CAEO,QAASC,kBAAT,EAAqC,CAC1C,MAAOD,WAAU,EAAjB,CACD,CAEM,QAASE,gBAAT,CACLF,UADK,CAELG,OAFK,CAGLC,MAHK,CAIL,CACAR,QAAQ,CAACS,GAATT,CAAaI,UAAbJ,CAAyBO,OAAzBP,CAAAA,CACA,GAAI,CAAA,CAAA,CAAA,MAAA,CAAA,SAAA,GAAA,EAAeQ,MAAnB,CAA2B,CACzBL,OAAO,CAACM,GAARN,CAAYK,MAAZL,CAAoBC,UAApBD,CAAAA,CACD,CACF,CAEM,QAASO,0BAAT,CACLN,UADK,CAELG,OAFK,CAGL,CACAL,WAAW,CAACO,GAAZP,CAAgBE,UAAhBF,CAA4BK,OAA5BL,CAAAA,CACD,CAEM,QAASS,kBAAT,CAA2BP,UAA3B,CAA+CI,MAA/C,CAAgE,CACrER,QAAQ,CAACY,MAATZ,CAAgBI,UAAhBJ,CAAAA,CACA,GAAI,CAAA,CAAA,CAAA,MAAA,CAAA,SAAA,GAAA,EAAeQ,MAAnB,CAA2B,CACzBL,OAAO,CAACS,MAART,CAAeK,MAAfL,CAAAA,CACD,CACF,CAEM,QAASU,YAAT,CAAqBT,UAArB,CAAyC,CAC9C,MAAOJ,SAAQ,CAACc,GAATd,CAAaI,UAAbJ,CAAP,CACD,CAEM,QAASe,sBAAT,CAA+BX,UAA/B,CAAmD,CACxD,MAAOF,YAAW,CAACY,GAAZZ,CAAgBE,UAAhBF,CAAP,CACD,CAEM,QAASc,oBAAT,CAA6BR,MAA7B,CAA6C,CAClD,GAAMJ,WAAU,CAAGD,OAAO,CAACW,GAARX,CAAYK,MAAZL,CAAnB,CACA,GAAIC,UAAU,GAAKa,SAAnB,CAA8B,CAAA,GAAA,aAAA,CAC5B,MAAA,CAAA,YAAA,CAAOJ,WAAW,CAACT,UAAD,CAAlB,IAAA,IAAA,EAAA,YAAA,GAAA,IAAA,EAAA,CAAA,YAAA,CAAkC,IAAlC,CACD,CACD,MAAO,KAAP,CACD","sourcesContent":["import { isJestEnv } from '../utils';\nimport { GestureType } from './gestures/gesture';\nimport { GestureEvent, HandlerStateChangeEvent } from './gestureHandlerCommon';\n\nexport const handlerIDToTag: Record<string, number> = {};\nconst gestures = new Map<number, GestureType>();\nconst oldHandlers = new Map<number, GestureHandlerCallbacks>();\nconst testIDs = new Map<string, number>();\n\nlet handlerTag = 1;\n\nexport function getNextHandlerTag(): number {\n  return handlerTag++;\n}\n\nexport function registerHandler(\n  handlerTag: number,\n  handler: GestureType,\n  testID?: string\n) {\n  gestures.set(handlerTag, handler);\n  if (isJestEnv() && testID) {\n    testIDs.set(testID, handlerTag);\n  }\n}\n\nexport function registerOldGestureHandler(\n  handlerTag: number,\n  handler: GestureHandlerCallbacks\n) {\n  oldHandlers.set(handlerTag, handler);\n}\n\nexport function unregisterHandler(handlerTag: number, testID?: string) {\n  gestures.delete(handlerTag);\n  if (isJestEnv() && testID) {\n    testIDs.delete(testID);\n  }\n}\n\nexport function findHandler(handlerTag: number) {\n  return gestures.get(handlerTag);\n}\n\nexport function findOldGestureHandler(handlerTag: number) {\n  return oldHandlers.get(handlerTag);\n}\n\nexport function findHandlerByTestID(testID: string) {\n  const handlerTag = testIDs.get(testID);\n  if (handlerTag !== undefined) {\n    return findHandler(handlerTag) ?? null;\n  }\n  return null;\n}\n\nexport interface GestureHandlerCallbacks {\n  onGestureEvent: (event: GestureEvent<any>) => void;\n  onGestureStateChange: (event: HandlerStateChangeEvent<any>) => void;\n}\n"]},"metadata":{},"sourceType":"script"}